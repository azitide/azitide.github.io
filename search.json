[{"title":"Container容器：未来的最终解：Docker（入门导览）","url":"/post/docker.html","content":"容器：可以无视机器、系统限制的时刻使用任何的软件或程序的虚拟机\n\n容器解释：什么是容器？ | IBM\n\n备注：Docker本身并不是容器，它是创建容器的工具，是应用容器引擎\n优势：\n\n\n\n\ndocker\n虚拟机\n\n\n\n内存\n轻量\n占用大\n\n\n设备\n几乎支持所有电子设备\n主要PC主机\n\n\n镜像复用\n可以打包到官方仓库，云端下载\n需要点对点发文件\n\n\n系统资源\n0~5%\n5~15%\n\n\n简过历史：\n2010年，几个搞IT的年人，在美国旧金山成立了一家名叫“dotCloud”的公司，\n专门搞LXC，就是Linux容器虚拟技术（Linux container）\n后来，dotCloud公司将自己的容器技术进行了简化和标准化，并命名为——Docker（码头工人）。\n后面开源了，被工程师们发现这玩意比虚拟机轻量多了，受到热烈追捧，越多越多人加入docker社区并支持开发。\n\nDocker安装：\nWin11安装Docker\nubuntu安装最详细的ubuntu 安装 docker教程 \n其他系统看这个安装 Docker\n\nDocker技术的三大核心概念：\n镜像（Image）\n容器（Container）\n仓库（Repository）\n\n理解：​       我通过设计蓝图建造了属于自己的一栋房子，很漂亮，我随后把蓝图上传了设计网站，别人看到了，觉得很漂亮，直接拿蓝图建造一模一样的房子，当然，这蓝图也可以在原来的基础上修改。\n\n注：蓝图：镜像 | 房子：容器 | 设计网站：仓库 | 代入进去！\n\n使用方法（两种）1、镜像构建\nDockerfile （文件名）是一个用来构建镜像的文本文件\n\nFROM ubuntu:latest\n#通过FROM指定的镜像名称必须是一个已经存在的镜像，这个镜像称之为基础镜像\nWORKDIR &#x2F;app\n# 设置工作目录（根据你系统的路径来选择）\nCOPY ..\n# 复制当前目录下的所有文件到工作目录\nRUN pip install -r requirements.txt\n# RUN指令是相当于在终端运行命令行\nCMD [&quot;python&quot;, &quot;app.py&quot;]\n# CMD运行应用\n\n\n使用docker build构建指令如下\n\ndocker build -t my-image .\n##docker build -t [你的自定义镜像名] [.是在你当前目录寻找这个Dockerfile]\n\n指令详解：https://flowus.cn/share/57ae782f-3253-417b-8527-c2b3a369e2ea?code=1LL2SL视频指导：Docker 10分钟快速入门_哔哩哔哩_bilibili\n2、直接拉取仓库镜像docker pull ubuntu:latest\n##docker pull 仓库名：镜像名（版本）\n\n仓库地址：Docker Hub 容器镜像库 |应用容器化\n启动镜像：\ndocker run -it ubuntu:latest --name my_rongqi -p 80\n##docker run -it [仓库名：镜像名] --name[自定义的容器命名] -p [网络端口]\n\nrun指令详解：Docker run 命令 | 菜鸟教程 (runoob.com)\n查看容器：\ndocker ps  \n#查看容器id\n\n进去容器：\ndocker attach 243c32usjh1\n##docker attach [通过查看的容器命令的数字id]\n\n其他操作：删除容器：\ndocker rmi 243c32usjh1&#x2F;my_rongqi\n##docker rmi [容器的id&#x2F;容器名]\n\n基础操作：\n#启动容器\ndocker start id|name\n#重启容器\ndocker restart id|name\n#关闭容器\ndocker stop id|name\n\n更详细指令：\nDocker 命令大全 | 菜鸟教程 (runoob.com)\n","categories":["小白知识"],"tags":["安装教程","使用教程"]},{"title":"ubuntu系统安装ROS（手动版）","url":"/post/ubuntu_ROS_shoudong.html","content":"前言有时网不行，用不了一键安装或者只能流量安装时，想想钱包就崩毁，炸了。毛都没，言归正传，用手动安装，也挺容易，用的流量也少了，但是但是，我还是推荐一键安装ROS，看下面的链接就行了！\n\nubuntu系统安装ROS（简单版） (azitide.github.io)\n\n开始1.确认自己的ubuntu系统然后去确认ROS版本\n\n\nUbuntu\nROS1\n开始\n维护到期\n\n\n\n14.04 LTS\nindigo\n2014\n2019\n\n\n16.04 LTS\nKinetic\n2016\n2021\n\n\n18.04 LTS\nMelodic\n2018\n2023\n\n\n20.04 LTS\nNoetic\n2020\n2025\n\n\n与\n\n\n\nUbuntu\nROS2\n开始\n维护到期\n\n\n\n20.04 LTS\nFoxy Fitzroy\n2020\n2023\n\n\n20.04 LTS\nGalactic Geochelone\n2021\n2022\n\n\n20.04 LTS22.04 LTS\nHumble Hawksbill(Recommended)\n2022\n2027\n\n\n22.04 LTS\nIron Irwini\n2023\n2024\n\n\n2、更换源（1）进去源网站\n\nros | 镜像站使用帮助 | 清华大学开源软件镜像站 \n与\n\nros2 | 镜像站使用帮助 | 清华大学开源软件镜像站 \n\n\n\n（2）打开ubuntu终端，输入命令行打开文件\nsudo gedit &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;ros-latest.list\n\n打开文件后，复制第2步的网址进去（如文件内有其他网址，可以删掉，只留一条）\n（3）文件保存退出后，新开一个终端，输入第3步的命令行（注意里面是两条命令行，要分开输入）\n3、安装ROS本体格式是：\nsudo apt install ros-”ROS版本“-desktop-full\n\n以20.04版本的ROS1为例：\nsudo apt install ros-noetic-desktop-full\n\n以22.04版本的ROS2为例：\nsudo apt install ros-Humble-desktop-full\n\n4、更新rosdepsudo rosdep init\n\nrosdep update\n\n5、设置环境变量：格式：\necho &quot;source 《你的ros系统文件setup.sh存放位置》&quot; &gt;&gt; ~&#x2F;.bashrc\n\n以20.04版本的ROS1为例：\necho &quot;source &#x2F;opt&#x2F;ros&#x2F;noetic&#x2F;setup.bash&quot; &gt;&gt; ~&#x2F;.bashrc\n\nsource ~&#x2F;.bashrc\n\n6、验证ros1启动命令分别开三个终端依次输入\nroscore\n\nrosrun turtlesim turtlesim_node\n\nrosrun turtlesim  turtle_teleop_key\n\n鼠标要在第三个终端，就可以通过按下键盘的 ↑ ↓ ← →键来对小海龟进行控制了，动起来便是成功了\nros2启动命令ros2没有中心节点，不需要roscore！\n第一个终端\nros2 run turtlesim turtlesim_node\n\n第二个终端\nros2 run turtlesim  turtle_teleop_key\n\n2023年12月31日，提前祝各位新年快乐！\n","categories":["Linux","ROS"],"tags":["安装教程"]},{"title":"Ubuntu备份自定义镜像 --我的目的：保存ROS环境","url":"/post/baocunjingxiang.html","content":"前言：我们在使用Ubuntu开发环境，经常出现搭着搭着系统就挂了，linux系统的稳定性是公认的差，于是我就开始想搞[Ubuntu系统]的备份和还原，以备不时之需，Linux环境搭建和我ROS的环境搭建实在是有点麻烦，大多数情况下，就算曾经搭建过十几遍，再次搭建有些包还是忘了安装，毕竟脑子的记忆地方就那点空间，做好备份是十分必要的。\n双系统的镜像备份（dd命令）第一步\n我们需要知道要被备份系统的硬盘的位置\n\n在终端中输入\ndf -h\n\n\n或者我们用最简单的方法：1.打开ubuntu系统软件 disks（硬盘）\n\n2.选中你的系统硬盘，查看位置（一般为&#x2F;dev&#x2F;***）\n\n第二步\n插入U盘（可以存储的硬盘或TF卡都行），也要知道U盘的位置，向上面一样用同样的方法看也可以\n\n或者执行以下命令，查看磁盘号\n\n\nsudo parted -l\n\n第三步我们需要使用dd命令进行备份\n1.需要在root模式下执行备份\nsudo su\n\n2.输入dd命令\ndd if&#x3D;&#x2F;dev&#x2F;sda1 conv&#x3D;sync,noerror bs&#x3D;64k | gzip -c &gt; &#x2F;dev&#x2F;TD&#x2F;jetson-tx1.img.gz\n\n注释：\n\nif&#x3D;&#x2F;dev&#x2F;sdb1 是被备份硬盘的位置，根据你自己的更改即可\n&#x2F;dev&#x2F;TD&#x2F; 是你U盘的位置（绝对路径）\njetson-tx1.img.gz 是你需要保存后的文件名，（.gz文件的后缀名不要更改）\n\n（输完后，终端不会动的)\n3、实时查看进度，需要在新建窗口中使用命令\nsudo watch -n 5 pkill -USR1 -n -x dd\n\n4、耐心等待，备份完成后，终端会自动退出进程,终端会自动暂停！\n再查看U盘里有没有个几G大小的文件\n重新烧录镜像前言：烧录镜像需要先格式化硬盘，但是烧录又需要linux系统的存在，优先适合双系统盘的Ubuntu系统（如jetson系列板子），或者在新的U盘装上Ubuntu系统也可以。\n1.烧录指令格式如下：\ngzip -c SSD 镜像文件 .gz | dd of&#x3D;&#x2F;dev&#x2F;sda1 bs&#x3D;64k\n\n2.根据原来的保存过的镜像，我应该如下：（烧录前也需要进入root模式）\ngzip -c &#x2F;dev&#x2F;TD&#x2F;jetson-tx1.img.gz | dd of&#x3D;&#x2F;dev&#x2F;sda1 bs&#x3D;64k\n\n3.解压过程可以新打开一个终端使用命令（一）查看一次当前进度：\nsudo pkill -USR1 -n -x dd\n\n（二）想让他一直显示当前进度，使用命令:\nsudo watch -n 5 pkill -USR1 -n -x dd\n\n（定时 5 秒刷新一次进度）\n4、耐心等待，备份完成后，终端会自动退出进程\n单系统：可以看转载的，因为别人都写的比较详细，所以我就不做多情了，看别人的就可以了\n（我相信技术永远是互利的，未来终会是开源的天下）\n1.Systemback\n把当前ubuntu系统做成镜像 - Systemback\nUbuntu18.04使用Systemback制作系统镜像\n\n2.Timesift\nUbuntu 20.04 系统备份和还原_-Timesift\n\n","categories":["Linux","ROS"],"tags":["安装教程"]},{"title":"小白知识--电脑的生产力与性能完美级调试","url":"/post/ruanjian.html","content":"小白知识–电脑的生产力与性能完美级调试开始性能增加虚拟内存，拉高内存上限，增强电脑性能–加载速度（需要硬盘有多余空间）\n教程基本一样，只是win10与win11的位置不一样，我的建议直接搜：性能\nwin10：右键我的电脑–属性–高级系统设置–标签中选择高级–性能设置–高级–虚拟内存更改–在选择想要移动的盘符–选择–自定义大小–设置–确定–应用\n1024 &#x3D;&#x3D; 1GB\nwin11：\n\nHUO电脑开机的第一步：应该是等待自启动的软件与插件启动完成，这个时间都够我背一个”两只老虎爱跳舞，一只没有…咳咳”,说一下，火绒安全软件里面的安全工具非常好用\n管理自启动那么我们用火绒安全软件里面的安全工具—-启动项管理，就调整不需要的软件。\n弹窗管理还有一些软件会弹窗一些xx广告出来，真的是”摸黑进厕所–找si“啊，在安全工具—-弹窗拦截，就可以关闭所有软件弹窗。\n官网下载火绒安全 (huorong.cn)\n\n生产力截图翻译我们在学习、工作时，大多时候都会是英文优先级很高，毕竟世界百分之90%的文献都是英文的，我们有时候难免看不懂，手机翻译就很累赘了，拍不清还翻译错了，为了防止”爆率是真的高“，我们最好还是用本机翻译，打开网易有道翻译–设置–快捷键位，就可以进行截图了\n官网下载网易有道翻译(youdao.com)\n\n截图截图，市面上的载图软件参差不齐各有各有的特点，Q、微信那些又要登录真的麻烦，我一想用插件多好啊，又小又能自启动，又不用登录！\n一款名为「Snipaste」的截图软件，体积仅有 12M 。\n功能：快捷键自定义大小截图，固定截图在屏幕，截图上进行标注\n使用官网Snipaste - 截图 + 贴图\n推荐下载：在微软商店直接搜名字，点击安装即可\n\n截图识字这个东西有好有坏，因为字体太多识别错字的几率也挺大的，我用过了很多的截图软件，如功能比较全的开源软件shareX，但是识别字体的正确率也比较低，我现在比较中意的还是微软官方出品了一个插件功能包增强版，识别到的字体正确率是我用过最高的—-Power Toys   ！     \nPower Toys 设置–文本提取器–快捷键设置\n官网：Microsoft PowerToys | Microsoft Learn\n下载方法：在微软商店直接搜Power Toys，点击安装即可\n\n游览器适配游览器插件的启用就是扩展最猛的功能，chrome、火狐相同的Chromium内核。尤其是强大的同步和扩展功能，能让你的浏览器瞬间开挂！\n下面的插件适配：\n\nEdge游览器\n\n谷歌游览器\n\n火狐游览器\n\n\n好用：\nAdGuard 广告拦截器\n\nAdGuard 广告拦截器可有效的拦截所有网页上的所有类型的广告，甚至是在 Facebook，Youtube 以及其它网站的广告！\n\nConvertio 万能格式转化器\n\n在线将文件从一种格式转换为另一种格式。支持超过 2500 种不同的转换:\n\nIDM下载器(IDM Integration Module)\n\nIDM不限速，最大支持32线程下载。支持网页视频、音乐、文件下载、自动捕获链接、自动识别文件名、批量下载、计划下载任务、站点抓取等。配和IDM软件使用。\n\nGlobal Speed: 视频速度控制\n\n与几乎所有视频和音频流媒体站点兼容，包括Youtube，Netflix，哔哩哔哩，腾讯视频，百度网盘， 爱奇艺等。自定义播放速度，最大支持16倍倍速。\n插件推荐网站：Chrome插件扩展程序_扩展迷 (extfans.com)\n下载方法：Edeg打开下方网址点击–获取–下载好后，打开拓展-点击启用\nMicrosoft Edge Addons\n\n这次的小白知识搞定了，会持——-续——-更新的啦！\n日期：2023年10月31日\n","categories":["小白知识"],"tags":[]},{"title":"ROS包编译时遇到报错,直接解决90%的问题？","url":"/post/ROSfanyi.html","content":"catkin编译系统对于源代码包，我们只有编译才能在系统上运行。而Linux下的编译器有gcc、g++，随着源文件的增加，直接用gcc&#x2F;g++命令的方式显得效率低下，人们开始用Makefile来进行编译,随着工程体量的增大,ROS对CMake进行了扩展，于是便有了Catkin编译系统。\n解决：功能包在使用时，需要拷到自己工作空间，安装好依赖后，编译即可。如何安装rosdep\n安装 rosdep 后，在“工作空间”下运行以下命令安装绝大部分\n一键安装依赖命令： \nrosdep install --from-paths src --ignore-src -r -y\n\n安装一些 rosdep 遗漏的依赖：ROS包相关依赖：编译报错时，后面如带 msgs 的都是 ROS 相关依赖没有，需要安装\n单独安装一些功能包&amp;依赖命令：\nsudo apt-get install ros-melodic-xxxx*\n\n注：melodic 是ROS1在ubuntu18.04系统版本下的版本号，要选中自己对应的版本号。\n​       xxxx* 是你所缺失的功能包或依赖，make编译报错会显示你缺失的东西。\n\n查看自己版本号的方法：\n\n​       在linux系统打开”opt&#x2F;ros“这个路径下的文件夹就是你的版本号\n​       在linux终端输入命令rosversion -d也会输入你的版本号\n系统相关依赖包：​    报错时，遇到没有带msgs消息包格式的缺失依赖报错信息，大概率是系统依赖欠缺，也需要安装。\nsudo apt-get install xxx*\n\n单独编译功能包我们知道用catkin_make会编译整个工作空间，但是有些ROS包需要其他编译完的ROS包的支持，所以要先编译一些功能包，再编译整个工作空间。\n单独编译一个功能包\ncatkin_make --pkg xxx\n\n注：xxx 是功能包的名字\n","categories":["ROS"],"tags":[]},{"title":"黑苹果系统虚拟机安装&PC物理电脑安装","url":"/post/HeiMacOS.html","content":"\n什么是黑苹果？\n\n简单的说是非苹果电脑，可以运行苹果的macOS操作系统和与之相关的应用程序\n黑苹果（操作系统）_百度百科 (baidu.com)\n前言笔者，在偶然时发现这个东东，觉得有趣便搞来玩玩，起初发现啊虚拟机是VM的，我的是16版本的在安装镜像时，发现虚拟机此时不支持Apple Mac OS系统，去网上搜发现需要去替换掉VM里的文件让他支持苹果镜像，但是我虚拟机有重要资料，怕有丢失，所以我选择了更新虚拟机到17版本也是自然支持的，安装也成功了，但是后面我有一台笔记本，我就改造一番，但是物理机的系统安装远比我想象的困难许多，搞了一个多星期才搞定的，搞定后，发现有些驱动还用不了，只能不断更换EFI文件再重装才搞定。想折腾的话，可以去搞下物理机，只想玩玩的话，用虚拟机安装就可以了！\n虚拟机：环境：\nVMware17pro 虚拟机（更新到17版本才会支持MacOS苹果系统）\n\n镜像（ISO是引导式镜像）下载：\nmacOS Catalina 10.15.0-10.15.7 (19H15) 正式版镜像&amp;虚拟机ISO镜像下载 (ittel.cn)\n\n安装步骤：\n\n虚拟机安装ubuntu系统 -文章\n\n跟ubuntu安装一样，只有第四步-变成：选择客户机系统选择成：Apple Mac OS\n\n\n虚拟机设置完成后\n\n点击再次开启此虚拟机，等待一会儿，就能看到苹果的logo\n\n第一步语言 - 选择中文（简体）\nmacos实用工具跳出，点击磁盘工具，进去后把VM开头的磁盘（最大的磁盘）抹掉\n点击左上角红色的叉叉按钮。回到实用工具，点击安装macos\n等进度条完成就可以设置个性化了，随便设置就好，如·联网、登录AppleI D等先不设置 直接跳过\n\n第二步：一些配置问题Windows电脑使用虚拟机安装MacOS(黑苹果)完美教程(AMD亲测也可用+解决分辨率全屏)\n看一下比较详细的，但是资料就不要问了，注意上当受骗！\nPC电脑装黑苹果系统：在PC物理环境下安装原生的MacOS系统，需要都通过OC引导（ OpenCore ）来欺骗MacOS系统你这个电脑是苹果硬件才能安装，因为每个人的电脑硬件都不一样，所以OC引导需要一个为你的电脑硬件定制的EFI文件，去让Mac系统完美适配你的电脑\n环境：所需工具：\nbalenaEtcher（录入镜像）：https://etcher.balena.io/\nEFI文件：https://github.com/daliansky/Hackintosh/\ndiskgenius（分区软件）：https://www.diskgenius.cn/\nU盘：32G以上\n镜像：\n镜像下载之前，最好是先找到适合自己的EFI文件！\n\n下载：\n我们去微信公众号搜索“黑果小兵的部落阁”，下载别人弄好过的镜像文件，我们只需更换EFI文件即可使用了:\n1.打开公众号的主页搜索文章\n2.搜” 10.15.7 “，把日期改为2020年的\n3.点进去这个文章,这个文章是10.15.7的苹果镜像版本，是苹果目前最稳定的系统点击给\n\n给作者个一块钱\n\n回到公众号发消息哪里，就会给你发网盘连接了，跟着下载就行了！\n录入U盘插上带，使用管理员权限打开etcher录入工具，选择下载好的镜像，选择U盘，点击Flash即可，完成后请直接关闭软件。\n\nEFI文件去网址寻找自己同型号的的EFI，下载回来，如没有请自行解决（网上再找找吧，不行的话，最好自己写，去国光看看，比较麻烦。如果想要简单的话，去淘宝花钱买吧）\n\nEFI文件网址：https://github.com/daliansky/Hackintosh/\n\nEFI知识：\nACPI - 国光的黑苹果安装教程：手把手教你配置 OpenCore (sqlsec.com)\nOC核心安装指南 (dortania.github.io)\n什么是EFI：https:&#x2F;&#x2F;post.smzdm.com&#x2F;p&#x2F;a9gvx9p5&#x2F;\n简单来说就是能让硬件支持MacOS系统！\n\n替换EFI：1.打开diskgenius（分区软件），找到这个已经录入好镜像的U盘，点击进去\n\n我这个镜像文件有4个文件夹一个镜像文件，三个引导文件（EFI是四叶草、OC是OC引导，这是最新的，（文件多少个，无所谓电脑有一个引导就可以安装了。\n\n2.找到OC这个文件夹进去，进去就会看到两个文件夹，其中一个就是EFI，把下载下来的这个EFI，替换上去即可\n系统安装：1.重启你要安装的电脑，按快捷键进去blos面板（品牌电脑或主板，自行百度快捷键）\n2.找到启动项，改为UEFIU盘启动的顺序为第一启动项，还要关闭安全启动。\n3.插入U盘，启动电脑，进去就会是OC引导，选择Boot OS X Install from XiaoMiPro（可能有点不一样，看出是安装镜像的选项就行了），等待代码跑完，就会出现苹果的logo了，等进度条完成向上面一样安装就行了\n资料支持[【黑果小兵】macOS Catalina 10.15.7 19H15 正式版 with Clover 5127原版镜像双EFI版][UEFI and MBR] | 黑果小兵的部落阁 (daliansky.net)\nmacOS安装教程兼小米Pro安装过程记录 | 黑果小兵的部落阁 (daliansky.net)\n","categories":["小白知识"],"tags":["安装教程"]},{"title":"编程的基本路径-绝对路径与相对路径的使用","url":"/post/LuJing.html","content":"编程的基本路径写法在我们一般编程的要使用的路径就两种：\n\n绝对路径：由根目录（&#x2F;）开始起的文件或者目录名称,（绝对路径的写法一定是由 &#x2F; 目录写起的）\n相对路径：相对于目前路径的文件名写法\n\n绝对路径如何理解我要搞一个网站项目，那我就在桌面新建一个工程文件夹“A1”，A1就是项目的根目录。在A1里添加分类的文件夹，可以放入我的代码、图片等文件，A1里添加两个文件夹分别是imgas和src，在imgas放入我的图片logo.jpg，在src中放入我的代码文件a1.html，现在，我需要在a1.html引用图片logo.jpg\n结构目录\nA1\n├── imgas\n│   └── logo.jpg\n└── src\n    └── a1.html\n\n写法\n由根目录（&#x2F;）开始起的文件或者目录名称\n\n&#x2F;A1&#x2F;imgas&#x2F;logo.jpg\n\n相对路径如何理解上面的，绝对路径找文件要从头开始找起，相对路径就是从我们所在文件或目录的上下找。\n结构目录\nA1\n├── imgas\n│   └── logo.jpg\n└── src\n    └── a1.html\n\n我们看到a1.html与logo.jpg都不在一个文件夹内，要用的话，我们跑去上一级，进去到imgas文件夹才能引用！\n写法\n\n以”..&#x2F;“开头：向上走一级，代表目标文件在当前文件所在的上一级目录\n\n..&#x2F;imgas&#x2F;logo.jpg\n\n写法\n以“.&#x2F;”开头，代表当前目录和文件目录在同一个目录里，“.&#x2F;”也可以省略不写！\n\n.&#x2F;imgas&#x2F;logo.jpg\n\n\n以”..&#x2F;“开头：向上走一级，代表目标文件在当前文件所在的上一级目录\n\n..&#x2F;imgas&#x2F;logo.jpg\n\n\n以”..&#x2F;..&#x2F;“开头：向上走两级，代表父级的父级目录。一个..&#x2F;代表往上走一级，走多少级就用多少个！\n\n..&#x2F;..&#x2F;imgas&#x2F;logo.ipg\n\n","categories":["Linux"],"tags":[]},{"title":"ROS基本工具命令行大全(概括)","url":"/post/ROSshouce.html","content":"ROS命令行大全1.节点工具命令行\n\n\n命令行\n作用\n\n\n\nroscore\n运行ROS核心\n\n\nrosrun “软件包” “节点程序”\n通过软件包找到程序去运行\n\n\nrosnode list\n查看在运行的节点\n\n\nroscd\n通过包名进去到所在目录\n\n\nrospack\n获取软件包的有关信息，加上find可以查看路径\n\n\nrosls\n通过包名显示所在目录的文件\n\n\nrosed\n通过包名找到程序并打开编辑器，默认是vim,可以更换编辑器\n\n\nroslaunch\n可以用来启动定义在launch（启动）文件中的节点\n\n\n\n使用重映射参数来改变节点名称：\n\n$ rosrun turtlesim turtlesim_node __name:&#x3D;my_turtle\n\n2.话题工具命令行\n\n\n命令行\n作用\n\n\n\nrosrun rqt_graph rqt_graph\n打开节点程序，查看话题和节点之间的通信关系\n\n\nrostopic list\n列出当前已被订阅和发布的所有话题，加上空格后使用-v可以查看分类\n\n\nrostopic echo “话题”\n显示在某个话题上发布的数据\n\n\nrostopic type “话题”\n查看所发布话题的消息类型\n\n\nrostopic pub\n将数据发布到当前某个正在运行广播的话题\n\n\nrostopic hz\n查看话题数据发布的速率。\n\n\nrqt_plot\n在滚动时间图上显示发布到某个话题上的数据\n\n\n注：“话题”是指在ros中的话题名称\n详情：话题工具\n3.服务工具命令行\n\n\n命令行\n作用\n\n\n\nrosservice list\n列出正在活跃服务的信息\n\n\nrosservic call\n用给定的参数调用服务\n\n\nrosservice type “服务”\n查看 服务的消息类型\n\n\nrosservice find “服务的消息类型”\n按照服务类型查找服务\n\n\nrosservice uri\n查看服务的ROSRPC uri\n\n\n注：”服务”是指在ros中的服务名称。\nuri：节点程序的服务的统一资源定位符或者说是地址。\n3.1 rosparam\n能让我们在ROS[参数服务器Parameter Server]上存储和操作数据\n\n\n\n\n命令行\n作用\n\n\n\nrosparam set\n设置参数\n\n\nrosparam get\n获取参数\n\n\nrosparam load\n从文件中加载参数\n\n\nrosparam dump\n向文件中转储参数\n\n\nrosparam delete\n删除参数\n\n\nrosparam list\n列出参数名\n\n\n4.msg和srv\nmsg（消息）：msg文件就是文本文件，用于描述ROS消息的字段。它们用于为不同编程语言编写的消息生成源代码。\nsrv（服务）：一个srv文件描述一个服务。它由两部分组成：请求（request）和响应（response）。\n\n\n\n\n命令行\n作用\n\n\n\nrosmsg -h\n列出可以显示消息的消息类型工具命令行\n\n\nrossrv -h\n列出显示服务的消息类型工具命令行\n\n\nrossrv show 显示服务格式内容\nrossrv list 显示服务列表\nrossrv package 显示指定包中的所有服务列表\nrossrv packages 显示所有带有服务的包的列表\nrossrv md5 显示指定服务类型的 md5 总和\n\n5.录制和回放数据bag命令行\n\n\n命令行\n作用\n\n\n\nrosbag record -a\n录制所有话题，所有发布的话题都应该积累在一个bag文件中\n\n\nrosbag info “bag文件”\n执行info命令检查bag文件的内容而不回放它\n\n\nrosbag play “bag文件”\n回放bag文件\n\n\nrosbag record -O subset “话题1”\n录制指定话题\n\n\ntime rosbag info “bag文件”\n手动检查所有已发布的话题，查看发布了多少信息\n\n\ntime rosbag play –immediate demo.bag –topics “话题”\n使用--immediate选项 回放文件，他就只会发布我们指定的话题\n\n\n详情：bag使用方法\n6.系统与软件包\n\n\n命令行\n作用\n\n\n\nroswtf\n检查ROS系统错误、话题与节点的错误\n\n\nrosdep install “软件包”\n安装ROS 软件包所需要的系统依赖项\n\n\n.&#x2F;install_for_noetic.ch\n安装软件包依赖项\n\n\ncatkin_create_pkg “软件包名” roscpp rospy\n创建软件包，roscpp等为所需依赖项\n\n\ncatkin_make\n到工作空间里，去重新编译软件包\n\n\n\n\n\n\nc++程序每次修改后都需要回到工作空间编译，catkin_make\npython程序则只需要增加一次可执行文件权限即可，chmod +x “python文件”\n消息包的类型：https://www.edrawsoft.cn/viewer/public/s/858ac382469902 （谷歌游览器打开）\n7.仿真\n\n\n命令行\n作用\n\n\n\ngazebo\n启动Gazebo仿真，在新版的ros已经嵌入 ，无需下载\n\n\nrqt_robot_steering\n图形化速度调节器，控制机器人移动速度\n\n\nrviz\n可视化雷达工具\n\n\nrqt_console\n&amp;查看节点日志信息\n\n\nrqt_logger_level\n&amp;改变查看节点日志信息的详细级别\n\n\ngmapping建图\n\n\n命令行\n作用\n\n\n\nrosrun rqt_tf_tree rqt_tf_tree\n查看tf树\n\n\nrosrun gmapping slam_gmapping\n启动建图节点\n\n\nrosrun wap_server map_saver -f “文件名”\n保存地图文件，生成图片和一个yaml文件\n\n\nrosrun map_server map_server “yaml文件”\n加载地图文件\n\n\n一般发布类型的话题\n\n\n话题\n意义\n\n\n\n&#x2F;scan\n雷达数据发布话题\n\n\n&#x2F;map\n地图数据发布话题\n\n\n&#x2F;tf\n坐标系数据转换的话题\n\n\n&#x2F;cmd_vel\n机器人移动发布话题\n\n\n&#x2F;imu&#x2F;data\n机器人的姿态发布话题\n\n\n依赖项\n\n\n依赖项\n作用\n\n\n\nroscpp\n**c++**的程序支持\n\n\nrospy\npython的程序支持\n\n\nsensor_msgs\n传感器消息类型的消息包\n\n\nstd_msgs\n基本数据类型的消息包\n\n\nnav_msgs\n地图数据类型的消息包\n\n\n笔者于2023年8月7号，第一次写下，后续会完善！\n","categories":["ROS"],"tags":["技巧手册"]},{"title":"ROS入门基础教程 - (快速版)","url":"/post/ROSrumen.html","content":"ROS入门基础教程 -（快速版）前言笔者写的是ros的简单教程，根据官方文档改编，不讲解原理和扩展的话题，只是为了直接上手使用ros，不愿浪费时间逐一了解，直接让小白使用。快人一万步！ros本质就是一个个的工具组成的，一起联合使用，工具之间的配合需要通过话题&amp;服务去通信合作，ros主要是配合linux系统而去维护的，我们最好使用linux系统，所以我们最好使用拥有图形化的乌班图ubuntu，只有20.04及以下版本最后配对ROS1了，22.04已经不支持ROS1了。小白的话最好用虚拟机，不怕搞坏电脑。学习要慢慢学，以下是ROS的核心基础，搞定话的半天可能行了，但是学懂可能要三天以上。\n\n昨天之深渊，今日之浅谈，路虽远行之将至，事虽难做其可成。\n\n官方文档 - 中文&#x2F;ROS&#x2F;教程 - ROS百科\n1.安装并配置ROS环境ubuntu系统安装ROS（简单版）\n虚拟机安装ubuntu系统20.04 (详细版)\n配置完成后\n看一下啊b站up的快速视频\n超精简8分钟ros入门教程，实战前够用的基础_bilibili\n2.ROS文件系统导览ROS的文件系统与linux的文件系统最大的区别就是可以通过的软件包名与node的程序名来直接查找文件\n\n\n\n命令行\n用法\n\n\n\nrospack\n获取软件包的有关信息，加上find可以查看路径\n\n\nroscd\n通过包名进去到所在目录\n\n\nrosls\n通过包名显示所在目录的文件\n\n\nrosed\n通过包名找到程序并打开编辑器，默认是vim\n\n\n用法：**(下面所有 $ 前缀表示为命令行不要复制   # 后面是注释，也不要复制)**打开终端输入\n$ rospack list  #查看所在环境的全部软件包\n\n格式：\n$ find [package_name]  #使用find可以查找路径\n\n注：[package_name] 是包名\n正确命令 如：\n$ rospack find roscpp\n\nroscd、rosld 的格式\nroscpp&#x2F;cmake\n\n注：roscpp是包名 &#x2F;后面是路径的子目录（子目录可以不填）\nTab键：可以输完命令行&amp;包名后自动补全  包名或&amp;路径\n3.工作空间&amp;软件包3.1创建工作空间\n\n工作空间（workspace）是一个存放工程开发相关文件的文件夹。\nsrc：代码空间（Source Space）\nbuild：编译空间（Build Space）\ndevel：开发空间（Development Space）\ninstall：安装空间（Install Space）\n\n$ cd ~\n$ mkdir catkin_ws         #创建文件夹\n\n注：每次只复制一句在终端输入，#后面是注释，不要复制\n3.2创建存放代码的文件夹\n$ cd ~&#x2F;catkin_ws\n$ mkdir src               #src：代码空间（Source Space）\n\n3.3创建软件包，先进去src文件夹\n$ cd ~&#x2F;catkin_ws&#x2F;src\n\n再使用catkin_create_pkg命令创建一个名为beginner_tutorials的新软件包\n这个软件包依赖于std_msgs、roscpp和rospy：\n$ catkin_create_pkg beginner_tutorials std_msgs rospy roscpp\n\n3.4配置文件\n$ cd ~&#x2F;catkin_ws\n$ catkin_make     #编译&amp;生成配置文件\n\n分别生成package.xml和CMakeLists.txt两个配置文件\n文件详解：\n\npackage.xml\n**CMakeLists.txt **\n\n3.5完成后更新一下环境    (要在工作空间的根目录运行)\n$ source ~&#x2F;catkin_ws&#x2F;devel&#x2F;setup.bash\n\n注意：在以后使用ros命令行报错显示找不到包，都要使用上面命令行更新环境,这是临时性的，只对当前终端有效。下面有永久的环境设置，就不用每次都要输入一次了！\n3.6更新完，重新构建一下工作空间，编译&amp;生成配置文件\n$ cd ~&#x2F;catkin_ws\n$ catkin_make\n\n永久ROS环境设置：在桌面终端输入命令行,打开bashrc文件：\n$ gedit .bashrc\n\n在最下面输入setup.bash的路径，让ROS找到：\nsource ~&#x2F;catkin_ws&#x2F;devel&#x2F;setup.bash\n\nsetup.bash的路径是在你的工作空间里面的，不是固定的，先去工作空间找这个文件，再把你的文件路径写上去！\n4.节点nodes\n节点Nodes：节点是一个可执行文件，它可以通过ROS来与其他节点进行通信。\n\nROS客户端库可以让用不同编程语言编写的节点进行相互通信：\n\nrospy &#x3D; Python客户端库\nroscpp &#x3D; C++客户端库\n\nnode节点是在 工作空间ws&#x2F;src&#x2F;软件包&#x2F;src 写入程序cpp&amp;py，更改CMakeLists.txt文件后，用catkin_make编译生成可执行的node程序\n\n4.1运行node，需要新的终端打开并运行roscore\n4.2通过包名使用roscore可以运行指定的节点程序\n4.3查看在运行的node节点\n\n$ rosnode list\n\n\n4.4rosrun可以让你用包名直接运行软件包内的节点（而不需要知道包的路径）\n\n用法：\n$ rosrun [package_name] [node_name]\n\n注：[package_name]是软件包名称  丨 [node_name]是节点程序\n所以现在我们试着运行turtlesim包中的turtlesim_node（小海龟）。\n在一个新终端中：\n$ rosrun turtlesim turtlesim_node\n\n\n4.5使用[重映射参数](http://wiki.ros.org/Remapping Arguments)来改变节点名称：\n\n$ rosrun turtlesim turtlesim_node __name:&#x3D;my_turtle\n\n注：__name:&#x3D;my_turtle               #名字更改为my_turtle\n5.话题节点1与节点2之间需要通过话题去通信，节点1在话题上发布消息，节点2就要订阅话题才能收到节点1的消息\n\n\n\n命令行\n工具作用\n\n\n\nrqt_graph\n查看节点和话题的关系\n\n\nrostopic echo\n显示在某个话题上发布的数据\n\n\nrostopic list\n列出当前已被订阅和发布的所有话题\n\n\nrostopic type\n查看所发布话题的消息类型\n\n\nrostopic pub\n将数据发布到当前某个正在广播的话题\n\n\nrostopic hz\n报告话题数据发布的速率。\n\n\nrqt_plot\n在滚动时间图上显示发布到某个话题上的数据\n\n\n注意：命令行工具的使用都需要开启roscore 。\n开始 使用下面的工具需要打开三个终端执行\n$ roscore                            #打开第一个新终端，运行ros\n$ rosrun turtlesim turtlesim_node    #打开第二个终端，出现小海龟\n$ rosrun turtlesim turtle_teleop_key #第三个终端，通过键盘遥控小海龟\n\n5.1 rqt_graph#查看节点和话题的关系\n$ rosrun rqt_graph rqt_graph         #可以简写为 rpt_graph 直接输入\n\n\n鼠标放在/turtle1/command_velocity上方，两个圆的就是节点，红色就是话题\n5.2rostopic#获取ROS话题的信息\n你可以使用帮助选项查看可用的rostopic的子命令，例如：\n$ rostopic -h\n\n5.3rostopic echo #显示在某个话题上发布的数据\n用法：\n$ rostopic echo [topic]   #[topic]是话题\n\n$ rostopic echo &#x2F;turtle1&#x2F;cmd_vel   #例子\n\n5.4rostopic list#列出当前已被订阅和发布的所有话题\n$ rostopic list -v  #可以分别看到订阅和发布的话题\n\n5.5rostopic type #查看所发布话题的消息类型\n$ rostopic type [topic]     #[topic]是话题\n\n5.6rostopic pub#把数据发布到当前某个正在广播的话题上\nrostopic pub [topic] [msg_type] [args]\n\n注：[topic]是话题  丨 [msg_type]是消息类型  丨  [args]是消息&amp;数据\n例子：\n$ rostopic pub -1 &#x2F;turtle1&#x2F;cmd_vel geometry_msgs&#x2F;Twist -- &#39;[2.0, 0.0, 0.0]&#39; &#39;[0.0, 0.0, 1.8]&#39;\n\n这个 -1是 次数  丨 – 表明之后的参数都不是选项  丨以上命令会发送一条消息给小海龟，告诉它以2.0大小的线速度和1.8大小的角速度移动\n5.7rostopic pub -r命令#可以来发布源源不断的命令，稳定的频率为1Hz的指令流如下：\nrostopic pub &#x2F;turtle1&#x2F;cmd_vel geometry_msgs&#x2F;Twist -r 1 -- &#39;[2.0, 0.0, 0.0]&#39; &#39;[0.0, 0.0, -1.8]&#39;\n\n6.ros服务服务（Services）是节点之间通讯的第二种方式。服务允许节点发送一个请求（request）并获得一个响应（response）。\nrosservice#可以很容易地通过服务附加到ROS客户端&#x2F;服务器框架上。rosservice有许多可用于服务的命令，如下所示：\n用法：\n$ rosservice -h       #看到可以用到的命令行\n\n\n\n\n命令行\n作用\n\n\n\nrosservice list\n输出活跃服务的信息\n\n\nrosservic call\n用给定的参数调用服务\n\n\nrosservice type\n输出的服务的类型\n\n\nrosservice find\n按照服务类型查找服务\n\n\nrosservice uri\n输出服务的ROSRPC uri\n\n\n6.1rosservice list例子：\n$ rosservice list        #查看当前节点提供的所有服务\n\n6.2rosservice call#给参数调用服务\n用法：\n$ rosservice call [service] [args]    #[service]是话题 丨 [args]是数据&amp;消息 \n\n例子：（这个命令会重新生成第二只小海龟）这个就是给数据去掉调用&amp;启动服务\n$ rosservice call &#x2F;spawn 2 2 0.2 &quot;&quot;\n\nrosparam#能让我们在ROS[参数服务器（Parameter Server）](http://wiki.ros.org/Parameter Server)上存储和操作数据\n用法：\n$ rosparam -h       #看到可以用到的命令行\n\n\n\n\n命令行\n作用\n\n\n\nrosparam set\n设置参数\n\n\nrosparam get\n获取参数\n\n\nrosparam load\n从文件中加载参数\n\n\nrosparam dump\n向文件中转储参数\n\n\nrosparam delete\n删除参数\n\n\nrosparam list\n列出参数名\n\n\n6.3rosparam list$ rosparam list              #可以看到turtlesim节点在参数服务器上的所有参数\n\n6.4rosparam set#修改参数值\n$ rosparam set &#x2F;turtlesim&#x2F;background_r 150   #修改参数值为150\n\n注：&#x2F;turtlesim&#x2F;background_r 这个参数用于设定背景颜色的 r是红色 改为150的色值\n修改后需要rosservice call的命令去调用服务使之生效\n$ rosservice call &#x2F;clear\n\n小海龟的背景就会变色了\n6.5rosparam get#获取参数值\n$ rosparam get &#x2F;turtlesim&#x2F;background_g\n\n注：&#x2F;turtlesim&#x2F;background_g 获取参数用于设定背景颜色的值 g是绿色\n也可以用rosparam get /来显示参数服务器上的所有内容：\n$ rosparam get &#x2F;\n\n6.6rosparam dump和rosparam load用法：\n$ rosparam dump [file_name] [namespace]\n$ rosparam load [file_name] [namespace]\n\n在这里，我们将所有的参数写入params.yaml文件：\n$ rosparam dump params.yaml\n\n你甚至可以将yaml文件重载入新的命名空间，例如copy_turtle：\nrosparam load params.yaml copy_turtle\n\n7.输出信息工具和多节点启动\nrqt_console连接到了ROS的日志框架，以显示节点的输出信息。\nrqt_logger_level允许我们在节点运行时改变输出信息的详细级别，包括Debug调试、Info信息、Warn警告、Fatal 致命和Error错误。\n\n$ rosrun rqt_console rqt_console             #简写启动rqt_console \n\n$ rosrun rqt_logger_level rqt_logger_level   #简写启动rqt_logger_level\n\nroslaunch 多节点启动#roslaunch可以用来启动定义在launch（启动）文件中的节点。\n用法：\n$ roslaunch [package] [filename.launch]\n\n注：[package]是软件包    丨 [filename.launch]  是在软件包下的luanch文件\n$ roscd beginner_tutorials       #回到工作空间的软件包，\n\n注：这里报错的话，source一下环境，上面有命令\n$ mkdir launch                   #创建一个launch目录\n$ cd launch                      #进去目录\n$ touch turtlemimic.launch       #创建一个turtlemimic.launch文件\n$ gedit turtlemimic.launch       #通过编辑器打开turtlemimic.launch文件\n\n之后，将下面的文件粘贴在turtlemimic.launch文件里，保存并退出\n&lt;launch&gt;\n\n  &lt;group ns&#x3D;&quot;turtlesim1&quot;&gt;\n    &lt;node pkg&#x3D;&quot;turtlesim&quot; name&#x3D;&quot;sim&quot; type&#x3D;&quot;turtlesim_node&quot;&#x2F;&gt;\n  &lt;&#x2F;group&gt;\n\n  &lt;group ns&#x3D;&quot;turtlesim2&quot;&gt;\n    &lt;node pkg&#x3D;&quot;turtlesim&quot; name&#x3D;&quot;sim&quot; type&#x3D;&quot;turtlesim_node&quot;&#x2F;&gt;\n  &lt;&#x2F;group&gt;\n\n  &lt;node pkg&#x3D;&quot;turtlesim&quot; name&#x3D;&quot;mimic&quot; type&#x3D;&quot;mimic&quot;&gt;\n    &lt;remap from&#x3D;&quot;input&quot; to&#x3D;&quot;turtlesim1&#x2F;turtle1&quot;&#x2F;&gt;\n    &lt;remap from&#x3D;&quot;output&quot; to&#x3D;&quot;turtlesim2&#x2F;turtle1&quot;&#x2F;&gt;\n  &lt;&#x2F;node&gt;\n\n&lt;&#x2F;launch&gt;\n\n启动launch，多节点运行\n&amp; roslaunch beginner_tutorials turtlemimic.launch\n\n通过launch，我们启动了两只小海龟\n用rostopic pub向话题发送消息&amp;数据，会同时控制两只小海龟\nrostopic pub &#x2F;turtlesim1&#x2F;turtle1&#x2F;cmd_vel geometry_msgs&#x2F;Twist -r 1 -- &#39;[2.0, 0.0, 0.0]&#39; &#39;[0.0, 0.0, -1.8]&#39;\n\n8.msg和srv\nmsg（消息）：msg文件就是文本文件，用于描述ROS消息的字段。它们用于为不同编程语言编写的消息生成源代码。\nsrv（服务）：一个srv文件描述一个服务。它由两部分组成：请求（request）和响应（response）。\n\n注：msg文件存放在软件包的msg目录下，srv文件则存放在srv目录下\n8.1 msg$ roscd beginner_tutorials            #回到软件包\n$ mkdir msg                           #创建msg文件夹\n$ echo &quot;int64 num&quot; &gt; msg&#x2F;Num.msg      #定义消息类型并创建文件\n\n要更改配置文件package.xml \n$ roscd beginner_tutorials              #进去软件包目录\n$ gedit package.xml                     #打开package.xml\n\n保它包含以下两行且没有被注释，如果没有，添加进去\n&lt;build_depend&gt;message_generation&lt;&#x2F;build_depend&gt;\n &lt;exec_depend&gt;message_runtime&lt;&#x2F;exec_depend&gt;\n\n再更改配置文件CMakeLists.txt\n$ roscd beginner_tutorials              #进去软件包目录\n$ gedit CMakeLists.txt                  #打开CMakeLists.txt\n\n找到这一句，把message_generation添加上去\nfind_package(catkin REQUIRED COMPONENTS\n   roscpp\n   rospy\n   std_msgs\n   message_generation           #只复制只一句，添加上去\n)\n\n再找到add_message_files 修改为下面一样，把前面注释#号删掉\nadd_message_files(\n  FILES\n  Num.msg\n)\n\n检验\n$ rosmsg show beginner_tutorials&#x2F;Num\n\n&amp;\n$ rosmsg show Num\n\n8.2 srv$ roscd beginner_tutorials                        #回到软件包\n$ mkdir srv                                       #创建srv文件夹\n\n现在我们可以从rospy_tutorials包中复制一个服务：\n$ roscp rospy_tutorials AddTwoInts.srv srv&#x2F;AddTwoInts.srv\n\n更改配置文件CMakeLists.txt\n$ roscd beginner_tutorials              #进去软件包目录\n$ gedit CMakeLists.txt                  #打开CMakeLists.txt\n\n找到add_service_files，修改为下面一样\nadd_service_files(\n  FILES\n  AddTwoInts.srv\n)\n\n检验\n$ rossrv show beginner_tutorials&#x2F;AddTwoInts\n\n额外   都可以打开子命令查看功能\n$ rosmsg -h\n\n&amp;\n$ rosmsg show -h\n\n9.发布者和订阅者以下是python的教程，c++看这个(c++) - 发布者&amp;订阅者i\n9.1编写发布者节点节点”是连接到ROS网络的可执行文件。在这里，我们将创建talker（发布者）节点，该节点将不断广播消息。\n1.先回到软件包里\n$ roscd beginner_tutorials\n\n2.1首先让我们创建一个脚本目录来存放我们的(Python脚本)：\n$ mkdir scripts\n$ cd scripts\n\n3.下载示例脚本 talker.py 放到scripts目录中并给执行权限\n$ wget https:&#x2F;&#x2F;raw.github.com&#x2F;ros&#x2F;ros_tutorials&#x2F;noetic-devel&#x2F;rospy_tutorials&#x2F;001_talker_listener&#x2F;talker.py # 若遇到网络问题，请打开上面文件的链接并复制文本内容到talker.py文件中\n$ chmod +x talker.py\n\n9.2编写订阅者节点下载示例脚本 listener.py 放到scripts目录中并给执行权限\n$ roscd beginner_tutorials&#x2F;scripts&#x2F;\n$ wget https:&#x2F;&#x2F;raw.github.com&#x2F;ros&#x2F;ros_tutorials&#x2F;noetic-devel&#x2F;rospy_tutorials&#x2F;001_talker_listener&#x2F;listener.py # 若遇到网络问题，请打开上面文件的链接并复制文本内容到listener.py文件中\n$ chmod +x listener.py\n\n两个节点都完成后，回到catkin工作空间，然后运行catkin_make\n$ cd ~&#x2F;catkin_ws\n$ catkin_make\n\n9.3运行发布者确保roscore已经开启，回到catkin_ws工作空间，source一下环境\n我们制作了一个叫做talker的发布者，发布者节点启动：\n$ rosrun beginner_tutorials talker      # (C++)\n$ rosrun beginner_tutorials talker.py   # (Python)\n\n9.4运行订阅者上面，我们也制作了一个叫做listener的订阅者，让我们运行它：\n$ rosrun beginner_tutorials listener     # (C++)\n$ rosrun beginner_tutorials listener.py  # (Python) \n\n10.客户端和服务端下面是pychon的，也可以看这个python - 客户端&amp;服务端，c++看这个c++ - 客户端&amp;服务端i\n客户端和服务端是通过ros服务通信的，上面的发布者和订阅者是通过话题通信的。\n10.1编写服务端1.先回到软件包\nroscd beginner_tutorials\n\n2.在beginner_tutorials包中创建scripts/add_two_ints_server.py文件并粘贴以下内容进去\n#!&#x2F;usr&#x2F;bin&#x2F;env python\n\nfrom __future__ import print_function\n\nfrom beginner_tutorials.srv import AddTwoInts,AddTwoIntsResponse\nimport rospy\n\ndef handle_add_two_ints(req):\n    print(&quot;Returning [%s + %s &#x3D; %s]&quot;%(req.a, req.b, (req.a + req.b)))\n    return AddTwoIntsResponse(req.a + req.b)\n\ndef add_two_ints_server():\n    rospy.init_node(&#39;add_two_ints_server&#39;)\n    s &#x3D; rospy.Service(&#39;add_two_ints&#39;, AddTwoInts, handle_add_two_ints)\n    print(&quot;Ready to add two ints.&quot;)\n    rospy.spin()\n\nif __name__ &#x3D;&#x3D; &quot;__main__&quot;:\n    add_two_ints_server()\n\n3.给节点文件执行权限\n$ chmod +x scripts&#x2F;add_two_ints_server.py\n\n4,找到软件包内的CMakeLists.txt文件，把下面的内容粘贴上去\ncatkin_install_python(PROGRAMS scripts&#x2F;add_two_ints_server.py\n  DESTINATION $&#123;CATKIN_PACKAGE_BIN_DESTINATION&#125;\n)\n\n10.2编写客户端节点1.在beginner_tutorials包中创建scripts/add_two_ints_client.py文件并粘贴以下内容进去\n#!&#x2F;usr&#x2F;bin&#x2F;env python\n\nfrom __future__ import print_function\n\nimport sys\nimport rospy\nfrom beginner_tutorials.srv import *\n\ndef add_two_ints_client(x, y):\n    rospy.wait_for_service(&#39;add_two_ints&#39;)\n    try:\n        add_two_ints &#x3D; rospy.ServiceProxy(&#39;add_two_ints&#39;, AddTwoInts)\n        resp1 &#x3D; add_two_ints(x, y)\n        return resp1.sum\n    except rospy.ServiceException as e:\n        print(&quot;Service call failed: %s&quot;%e)\n\ndef usage():\n    return &quot;%s [x y]&quot;%sys.argv[0]\n\nif __name__ &#x3D;&#x3D; &quot;__main__&quot;:\n    if len(sys.argv) &#x3D;&#x3D; 3:\n        x &#x3D; int(sys.argv[1])\n        y &#x3D; int(sys.argv[2])\n    else:\n        print(usage())\n        sys.exit(1)\n    print(&quot;Requesting %s+%s&quot;%(x, y))\n    print(&quot;%s + %s &#x3D; %s&quot;%(x, y, add_two_ints_client(x, y)))\n\n2.给节点文件执行权限\n$ chmod +x scripts&#x2F;add_two_ints_client.py\n\n3.在你的软件包内的CMakeLists.txt中编辑catkin_install_python()调用\ncatkin_install_python(PROGRAMS scripts&#x2F;add_two_ints_server.py scripts&#x2F;add_two_ints_client.py\n  DESTINATION $&#123;CATKIN_PACKAGE_BIN_DESTINATION&#125;\n)\n\n4.所有完成后，回到catkin工作空间，然后运行catkin_make\n$ cd ~&#x2F;catkin_ws\n$ catkin_make\n\n10.3运行服务端让我们先开始运行服务：\n$ rosrun beginner_tutorials add_two_ints_server     # (C++)\n$ rosrun beginner_tutorials add_two_ints_server.py  # (Python)\n\n10.4运行客户端运行客户端并附带必要的参数：\n$ rosrun beginner_tutorials add_two_ints_client 1 3     # (C++)\n$ rosrun beginner_tutorials add_two_ints_client.py 1 3  # (Python)\n\n你会看到：\nRequesting 1+3\n1 + 3 &#x3D; 4\n\n注：小技巧，报错时，日志中无明显报错信息，一般都是CMakeLists.txt文件写错，可以去碰碰运气\n11.录制和回放数据（bag文件）正在运行的ROS系统中的数据记录到一个bag文件中，然后通过回放这些数据来来重现相似的运行过程。\n11.1录制数据（创建bag文件）这一部分将指导你如何从正在运行的ROS系统中记录话题数据。话题数据将被积累到一个袋（bag）文件中。\n首先，在不同的终端中分别执行：\n$ roscore                            #打开第一个新终端，运行ros\n$ rosrun turtlesim turtlesim_node    #打开第二个终端，出现小海龟\n$ rosrun turtlesim turtle_teleop_key #第三个终端，通过键盘遥控小海龟\n\n检查正在运行的话题：\n$ rostopic list -v\n\n在用户的根目录建一个临时文件，我们将记录发布的数据保存进去。打开一个新终端：\n$ mkdir ~&#x2F;bagfiles    #创建文件夹\n$ cd ~&#x2F;bagfiles       #进去文件夹\n$ rosbag record -a    #运行rosbag record带选项-a，表明所有发布的话题都应该积累在一个bag文件中\n\n\n然后回到遥控小乌龟节点所在的终端窗口并控制乌龟随意移动10秒钟左右\n完成后，在运行rosbag record的窗口中按Ctrl+C以退出。\n现在查看~/bagfiles目录中的内容，你应该会看到一个以年份、日期和时间开头且扩展名是.bag的文件\n\n11.2检查bag文件现在我们已经使用rosbag record命令录制了一个bag文件，接下来我们可以使用rosbag info查看它的内容。我们可以执行info命令检查bag文件的内容而不回放它。在bag文件所在的目录下执行以下命令：\n$ rosbag info &lt;your bagfile&gt;\n\n注： 是你刚才录制数据保存下的文件名称\n11.3回放bag文件回放bag文件以再现系统运行过程。首先用Ctrl+C杀死之前运行的遥控小乌龟终端窗口，但让小海龟继续运行。在终端中bag文件所在目录下运行以下命令：\n$ rosbag play &lt;your bagfile&gt;\n\n默认模式下，rosbag play命令在公告每条消息后会等待一小段时间（0.2秒）才真正开始发布bag文件中的内容\n最终/turtle1/cmd_vel话题将会被发布，同时在turtuelsim终端窗口中乌龟应该会像之前用遥控小海龟控制它那样开始移动\n你通过设定一个参数来改变消息发布速率。如果执行：\n$ rosbag play -r 2 &lt;your bagfile&gt;\n\n11.4录制指定话题跟上面一样的操作，只是 rosbag record工具命令改变一下\n用法：\n$ rosbag record -O subset “话题1” “话题2” “话题3”\n\n例子，在bag文件所在目录下执行以下命令：\nrosbag record -O subset &#x2F;turtle1&#x2F;cmd_vel &#x2F;turtle1&#x2F;pose\n\n\n上述命令中的-O参数告诉rosbag record将数据记录到名为subset.bag的文件中\n而后面的topic参数告诉rosbag record只能订阅这两个指定的话题。\n然后通过键盘控制乌龟随意移动几秒钟，最后按Ctrl+C退出rosbag record命令\n\n11.5从bag文件中读取消息注意先看原文[bag  - 读取消息](http://wiki.ros.org/cn/ROS/Tutorials/reading msgs from a bag file)\n1.在任何终端中用这个命令，来手动检查所有已发布的话题，以及向每个话题发布了多少消息\n$ time rosbag info demo.bag\n\n注：这个 demo.bag 是你刚才录制数据保存下的bag文件名称\n或者你已经知道话题名称的话：\n$ time rosbag info mybag.bag | grep -E &quot;(topic1|topic2|topic3)&quot;\n\n注：topic 是话题名称\n2.先保证启动启动roscore工具\n2.1使用rostopic echo命令可以订阅/obs1/gps/fix话题并复读该话题上发布的所有内容，同时用tee命令转储到一个yaml格式的文件中以便之后查看：\n$ rostopic echo &#x2F;obs1&#x2F;gps&#x2F;fix | tee topic1.yaml\n\n2.2再打开一个新终端，订阅另一个话题/diagnostics_agg，转储到另一个yaml格式的文件\n$ rostopic echo &#x2F;diagnostics_agg | tee topic2.yaml\n\n3.打开另一个新终端来回放bag文件，使用--immediate选项 回放文件，他就只会发布我们感兴趣的话题\n用法：\n$ time rosbag play --immediate demo.bag --topics &#x2F;topic1 &#x2F;topic2 &#x2F;topic3 &#x2F;topicN\n\n例子：\ntime rosbag play --immediate demo.bag --topics &#x2F;obs1&#x2F;gps&#x2F;fix &#x2F;diagnostics_agg\n\n4.完成！现在看一下你的两个终端，每个终端都订阅了一个话题，每个话题类型的所有消息用YAML格式输出，（这里要回放bag文件，终端才会有信息输出）\n到这里，ROS的基础核心，基本已经学完了。\n12.安装系统依赖项1.进入软件包，ROS packages必须在配置文件中声明他们需要哪些系统依赖项\n$ roscd turtlesim               #turtlesim为包名\n\n2.rosdep\nrosdep 是一个能够下载并安装ROS packages所需要的系统依赖项的小工具\n$ rosdep install [package]            #[package]为包名\n\n13.自定义消息类型cn&#x2F;ROS&#x2F;教程&#x2F;定义自定义消息 - ROS 维基1.自定义消息自定义一个消息类型很简单，只要将.msg文件放到一个包的msg文件夹下即可。请参考创建.msg 文件 （不要忘记选择相应的编译构建系统）。\n2.引用和输出消息类型消息类型都被归属到与package相对应的域名空间下，例如：\nc++\n1 #include &lt;std_msgs&#x2F;String.h&gt;\n2 \n3 std_msgs::String msg;\n\npython\nfrom std_msgs.msg import String\n \nmsg &#x3D; String()\n\n3.依赖项如果你要使用在其他package里定义的消息类型，不要忘记添加以下语句：\n&lt;build_depend&gt;name_of_package_containing_custom_msg&lt;&#x2F;build_depend&gt;\n&lt;run_depend&gt;name_of_package_containing_custom_msg&lt;&#x2F;run_depend&gt;\n\n到 package.xml文件\n结束了\n结语\n如果你可以耐心看完，到这里的话，我相信你，你虽白袷藍衫，但也犹如那水佩风棠般洒脱，落日熔金时，便是功成名就的白马少年，我将为你拔雪寻春，烧灯续昼，站在那天山外！\n\n","categories":["ROS"],"tags":[]},{"title":"ubuntu系统安装ROS（简单版）","url":"/post/ubuntu_ROS.html","content":"ubuntu系统安装ROS（简单版）网址\n清华开源镜像\n一、配置软件源1.首先我们要知道自己的电脑的cpu是什么架构的\n英特尔（intel）一般是x86架构，锐龙（amd）一般是arm架构，当然英特尔也有amd架构，但在少部分，因为双方都有授权，所以各自都有对方架构的少部分芯片,还有一些小众的架构如PowerPC(ppc64el)、RISC-V(riscv64) 和 S390x 等架构，这些架构的设备用ubuntu-ports镜像的软件源即可\n2.进去对应的架构的软件源\n\nubuntu | 镜像站使用帮助 | 清华大学开源软件镜像站 | x86\n与\n\nubuntu-ports | 镜像站使用帮助 | 清华大学开源软件镜像站 | arm\n\n\n3.选择对应的版本\n\n设置好后，随即文本框中会生成你需要的 sources.list 文件内容，一会用到。\n然后打开 Ubuntu 的终端，依次输入下面的命令\n1、\nsudo apt update\n\n2、\ncp &#x2F;etc&#x2F;apt&#x2F;sources.list ~&#x2F;Desktop\n\n3、\nsudo gedit &#x2F;etc&#x2F;apt&#x2F;sources.list\n\n三条命令都输完后会打开一个文件内容，\n把里面的全删掉，然后复制刚才网页生成的文本框内容粘贴上去，保存文件，退出\n二、安装ROS一键安装这里我们用小鱼的大佬的鱼香ROS 一键安装\n打开ubuntu终端，输入：\nwget http:&#x2F;&#x2F;fishros.com&#x2F;install -O fishros &amp;&amp; . fishros\n\n然后我们输入 1 一键安装 –&gt;  不更换源安装 –&gt; 选择你ubuntu版本对应的ros版本 –&gt; 桌面版–&gt; 进行安装\n\n报错：如报错，先检查网络原因，如没有问题，先用命令行更换源\nwget http:&#x2F;&#x2F;fishros.com&#x2F;install -O fishros &amp;&amp; . fishros\n\n 然后我们输入 5  –&gt;  删掉第三方源并更换国内源 –&gt;  添加ros&#x2F;ros2源–&gt; 完成，重新执行”一键安装“；\n验证：ros1启动命令1，然后新建一个终端，打开输入\nroscore\n\n终端完成后 会显示 [&#x2F;rosout], 这样成功了一半\n2，再新建第二个终端，输入\nrosrun turtlesim turtlesim_node\n\n它会打开一个蓝色屏幕的小乌龟在中间，成功了\n3，再建第三个终端，输入：\nrosrun turtlesim  turtle_teleop_key\n\n鼠标要在第三个终端，就可以通过按下键盘的 ↑ ↓ ← →键来对小海龟进行控制了。\n安装完成\nros2开启命令ros2没有中心节点，不需要roscore！\n1，新建终端\nros2 run turtlesim turtlesim_node\n\n2，另外开一个终端\nros2 run turtlesim  turtle_teleop_key\n\n安装完成\n三、配置rosdep这里我们用小鱼的大佬的 一键配置\n打开ubuntu终端，输入：\nwget http:&#x2F;&#x2F;fishros.com&#x2F;install -O fishros &amp;&amp; . fishros\n\n再输入 3 就一键配置了 \n完成\n四、更新系统环境这里我们还是用小鱼的大佬的 一键配置\n打开ubuntu终端，输入：\nwget http:&#x2F;&#x2F;fishros.com&#x2F;install -O fishros &amp;&amp; . fishros\n\n再输入 4 就一键配置了 \n完成\n到这里，我们的ROS已经安装完成，加油！\n","categories":["Linux","ROS"],"tags":["安装教程"]},{"title":"虚拟机安装ubuntu系统","url":"/post/ubuntu_index.html","content":"虚拟机安装ubuntu系统官方的系统，服务器在国外，下载容易出错，所以我们用开源网站的下载，会比较快。\n网址中科大安装源（优先推荐）\nIndex of &#x2F;ubuntu-releases&#x2F; (ustc.edu.cn)\n阿里开源\n阿里巴巴开源镜像站-OPSX镜像站-阿里云开发者社区 (aliyun.com)\n清华大学镜像\n清华大学开源软件镜像站 | Tsinghua Open Source Mirror\n开始安装1.1 我们用阿里云的，进去网址，下载需要的版本\n\n1.2 选择点击对应的版本(我这里选的是20.04版本的，一般设备选desktop的镜像，这个是有引导的安装的)\n\n完成、点击下载，进去后会自动下载，等待下载完成即可。（下载完后，检查一下镜像名称和大小，是否相差太多，没有问题即可）\n\n虚拟机2.1 打开虚拟机 （我用的是VMware Workstation 软件）\n\n2.2 打开文件 –&gt; 新建虚拟机（会弹出一个页面）跟着选项一步步来\n第一步选择 自定义（高级）\n\n第二步，选择硬件兼容性： workstation.16.x 这个是选择你虚拟机的版本，跟你对应就好（一般不改就可以了）\n\n第三步，选择 稍后安装系统  \n\n第四步，客户机操作系统 选择 Linux （因为ubuntu 是Linux的其中的分支 ），版本选择ubuntu\n\n第五步，命名虚拟机名称，位置（路径）：空间需要比较大，最好放在C盘以外，更改时路径不要出现中文\n\n第六步，处理器配置问题，看你需要的性能给大就给多，处理器数量给到4以上，小的话，最低给到2。内核数量给1就行\n\n第七步，内存选择，一般家用电脑包括笔记本等都是16G左右，win系统就要用去6-8g，你能用就也就剩下10G左右，最低选择2g，看自己需求\n\n第八步，网络类型 ：使用网络地址转换 即可\n\n第九步，I&#x2F;O控制器选择   LSI Loogic \n第十步，虚拟磁盘类型选择 SCSI\n\n第十一步，磁盘选择 - 创建新虚拟盘\n\n第十二步，磁盘容量大小 有空间，尽量选择到100G，虚拟磁盘存储为单个文件或者多个都可以，但是考虑性能的话尽量选择单个\n\n第十三步，磁盘文件名，不需要更改，直接下一步\n\n第十四步，打开 自定义硬件\n\n第十五步，找到CD，选择使用iso映像文件，选择 - 找到开始时下载的iso镜像文件\n\n文件选择对应的镜像完成 即可，这样 系统 安装完成了\n系统设置一、点击 开启虚拟机\n\n二、等待引导安装完成，在welcome下在滑到下面找到中文（简体），点击安装系统，然后会出现键盘选择，选择chinese即可，正常安装 即可，（在中途弹出黄色的窗口，提示你安装什么东西，可以直接选择安装）\n\n二、1. 这里是选择输入法-英文优先–&gt; continue（下一步）\n\n三、正常安装，-安装时下载更新\n\n四、清除整个磁盘，再点击现在安装即可\n\n五、地方，点击你所在的地图地点 - shanghai （必须要选择上海，不然会出问题）\n\n六、输入信息用户名和密码，个人的话密码123456就行了，输完后等安装即可\n\n等待安装完成，重启虚拟机即可 \n系统安装完成\n（关于20.04版本的中文是系统自带的，只需更新系统的输入法，在进行添加即可）\n2023.10.16重新更新。\n","categories":["Linux"],"tags":["安装教程"]},{"title":"甲骨文中国云 白嫖一个服务器 永久免费","url":"/post/oracle.html","content":"甲骨文中国云 白嫖一个服务器 永久免费甲骨文中国官网\n不包百分百，你的使用场景，说明需求！有一项，非常重要，是作为审核通过的第一要素，真诚一点！\n接下来，提交，然后就是等待！希望能通过吧（据说通过的概率千分之一）\n教程首先进去官网\n\n注册一个账号\n\n地区选择中国，如实填写即可。\n跟着步骤一步步来完成账号注册\n完成后，回到首页\n\n点击注册免费云套餐，或者点击 \n中国大陆https://www.oracle.com/cn/cloud/free/之后进去这个画面\n\n点击进去\n\n简单信息填写完了，会进到详细信息填写，在这里需要如实填写，尤其是带*号的选项，如：你Arm开发项目详情，用英文填写对你对arm架构实例的那种渴望，你的使用场景！这一项，非常重要，是作为审核通过的第一要素，请真诚点，我们不是欺诈！\n这个填写完之后，有五日的审核期，成功会发到邮箱，后续要看邮箱结果\n如果失败，还可以再次申请的的 \n诸君好运！\n","categories":["服务器"],"tags":[]},{"title":"小白知识--Hexo框架免费建网站(极速版)","url":"/post/Hexo.html","content":"小白知识 Hexo框架简单建网站Hexo官网\n\n快速上手注： 需要安装下列应用程序\nnods.js\n\ngit\n\n1.1 在任何地方（如：桌面）新建一个文件夹\n1.2 我们进去终端\n1.3 我们进去终端后 输入命令行\n\n即：\n1.直接复制下面的命令行输入\nnpm install hexo-cli -g\n\n2.等它完成后再输\nhexo init blog\n\n3.完成再输 （blog是文件名，可以自己定义）\ncd blog\n\n4.完成再输\nnpm install\n\n5.完成再输\nhexo s\n\n出现网址按ctrl后点击鼠标可以直接进入了，其中的4000是默认端口\n注：在终端界面在ctrl键+c键 可以关闭服务器 中断网站\n\n我们来看下这个简洁网站，没有东西！\n这样肯定不好看，我们去官网下的主题，去找好看的！\n主题Themes | 主题 Hexo\n在里面选择好看的，\n里面的主题一般放在github里，需要通过git拉取文件，但有些是通过npm或yarm安装的，最好是点进去主题查看主题教程。\n注：下载主题或启动主题都要在blog（即上面第三步，你生成的文件夹里面打开终端）\n\n下载完后\n打开后\n更改它的，更改为主题的名字或文件夹的名字\n注：这是yml配置文件“：”后面要有空格\n\n更改后重新启动在cmd终端输入\nhexo c\n\n再输\nhexo g\n\n再输 \nhexo s\n\n就可以看到网站已经更换到主题了\n部署在 GitHub Pages 上部署 Hexo | Hexo\n上面这个等于是一个免费的服务器托管\ngit准备工作我们需要配置一下GitHub账户信息，用户名和邮箱为您github上的用户名和邮箱\n\n在blog文件夹下，右键用Git Bash打开终端\n输入下方命令行（双引号要自己更改）\ngit config --global user.name &quot;用户名&quot;\n\n再输\ngit config --global user.email &quot;邮箱&quot;\n\n再输\nssh-keygen -t rsa -C &quot;邮箱&quot;\n\n\n一路回车即可，之后在C:\\Users\\”你当前登录windows的账号的名字“.ssh可以找到id_rsa.pub文件，用笔记本打开文件，复制里面的全部内容\n\ngithub准备工作\n新建仓库，仓库名为用户名.github.io \n点击仓库的settings，点击Deploy keys，\n然后点击Add deploy key，title设置为您的邮箱，\nKey为刚才复制的内容，之后点击Add key\n\n信息更改准备工作基本做完，回到上面的_config.yml文件（官方网站文件），在最底部填写入代码\n即：\ndeploy:\n  type: git\n  repo: https:&#x2F;&#x2F;github.com&#x2F;您的用户名&#x2F;您的用户名.github.io.git\n  brach: master\n\n还有这里地址\nurl: https:&#x2F;&#x2F;您的用户名.github.io&#x2F;\n\n代码更改完成\n安装插件回到我们之前的blog文件夹，打开cmd终端，输入命令行\nnpm install hexo-deployer-git --save\n\n然后直接三连\n干净清除缓存\nhexo c\n\n生成静态文件\nhexo g\n\n部署上线网站\nhexo d\n\n\n部署完成\n在浏览器输入 http:&#x2F;&#x2F;你的Github用户名.github.io 即可访问你的博客文章在.&#x2F; blog \\ source \\ _posts 在这个文件夹内是存放你的文章的，以md的文件形式保存\n语法什么是md，看这个 Markdown 官方教程\n每一篇文件都用md写入，hexo会主动读取并展示到网站。\n每一次文章写好放入文件夹即可直接三连\nhexo c\n\nhexo g\n\nhexp d\n\n网站即重新完成部署\n","categories":["前端","小白知识"],"tags":["网页","hexo"]},{"title":"小白知识--微信小程序的开发者知识","url":"/post/weixin.html","content":"小白知识–微信小程序的开发者知识小程序开发框架的目标是通过尽可能简单、高效的方式让开发者可以在微信中开发具有原生 APP 体验的服务。\n整个小程序框架系统分为两部分：逻辑层（App Service）和 视图层（View）。小程序提供了自己的视图层描述语言 WXML 和 WXSS，以及基于 JavaScript 的逻辑层框架，并在视图层与逻辑层间提供了数据传输和事件系统，让开发者能够专注于数据与逻辑。\n\n在上图可以看到，小程序的逻辑层和渲染层是分开的,分别运行在不同的线程中，运行也会比普通网页更快\n1.小程序与普通网页开发的区别开发语言\n\n小程序的其根本的开发语言就是是javaScript，只是换汤不换药。\n跟普通的网页开发基本一致\n\nWXML &#x3D; HTML\nwxss &#x3D; css\nJS &#x3D; javaScript\n更详细看这里：微信开放文档 (qq.com)\n2.运行环境\n小程序开发过程中只需要面对微信客户端，使用于辅助开发的小程序开发者工具进行开发，微信客户端有系统 iOS 和 Android 的版本，在新版的开发者工具是直接集成的。\n\n微信公众平台 (qq.com)\n使用微信号注册后，才可使用微信开发者工具\n3.json配置文件冷知识：微信小程序默认端口是：8084\n\n\n当前小程序全局配置app.json\n小程序开发者工具配project.config.json\n小程序局部页面配置page.json\n\n\n一个小程序页面由四个文件成 ， 分别是 ：\n\n4.小程序我们要搞一个好的小程序，要搞清楚要干什么的，他的功能是最重要的，再考虑受众群体是年轻人还是中年人，再想页面排版，其次再考虑是否要接入别人的api，使用别人的组件和功能，是否要通信，考虑性能，最后才是美观！\n网页：\n    按钮、功能显示、表单显示，页面功能、导航栏\n\n小程序：\n    页面设计、UI设计、小组件、页面布局、配色设计、性能优先\n\n服务器：\n    接口接入、服务器接入、通信服务、数据库 、端口号\n\nJavaScript：\n    动态类名、if判断、事件判定（changColor函数）、记录点击次数（bindtap函数）\n\n简单的小程序基础分析\n","categories":["前端","小白知识"],"tags":["微信小程序"]},{"title":"VUE-快速安装","url":"/post/VUE.html","content":"VUE官网：Vue.js - 渐进式 JavaScript 框架 | Vue.js (vuejs.org)\n一、环境安装命令行安装\nnpm install -g @vue&#x2F;cli\n\n验证安装\nvue --version\n\n二、创建命令行 ：创建新的项目\nvue create vue-demo\n\n输入后可以用方向键（上下）选择默认模板空格选中或取消选中，回车下一步。\n安装axios 通信\nnpm i axios -S\n\n\n\n三、运行项目进去项目文件夹根目录，在终端使用命令行\nnpm run serve\n\n\n\n想要项目显示\nVUE拓展：Vue3 (vue3js.cn)\n\n","categories":["前端"],"tags":["安装教程","VUE","框架"]},{"title":"Node.js简单快速使用手册","url":"/post/Node.js.html","content":"Node.js一、优先级loop &gt;  微任务\n\nProcess.nextTick\n\nPromise\n\nObject.observe\n\nMutationObserve\n\ncleck-&gt;setlmmediate()\n\nclose -&gt;callback\n\ntimer-&gt;超时调用、间歇调用\n\nI&#x2F;O操作\n\n二、模块引用我们使用 require 指令来载入 http 模块，并将实例化的 HTTP 赋值给变量 http\nvar http &#x3D; require(&quot;http&quot;);\n\nvar events &#x3D; require(&#39;events&#39;);\n\n三、服务器使用 http.createServer() 方法创建服务器，并使用 listen 方法绑定 8888 端口\n项目的根目录下创建一个叫 server.js 的文件，并写入以下代码\n&#x2F;&#x2F;引用模块\nvar http &#x3D; require(&#39;http&#39;);\n\nhttp.createServer(function (request, response) &#123;\n\n    &#x2F;&#x2F; 发送 HTTP 头部 \n    &#x2F;&#x2F; HTTP 状态值: 200 : OK\n    &#x2F;&#x2F; 内容类型: text&#x2F;plain\n    response.writeHead(200, &#123;&#39;Content-Type&#39;: &#39;text&#x2F;plain&#39;&#125;);\n\n    &#x2F;&#x2F; 发送响应数据 &quot;Hello World&quot;\n    response.end(&#39;Hello World\\n&#39;);\n&#125;).listen(8888);\n    &#x2F;&#x2F;绑定8888端口\n\n&#x2F;&#x2F; 终端打印如下信息\nconsole.log(&#39;Server running at http:&#x2F;&#x2F;127.0.0.1:8888&#x2F;&#39;);\n\n\n四、回调函数Node.js 异步编程的直接体现就是回调。异步编程依托于回调来实现\n非阻塞代码&#x2F;&#x2F;定义一个变量\nvar fs &#x3D; require(&quot;fs&quot;);\n\nfs.readFile(&#39;input.txt&#39;, function (err, data) &#123;\n    if (err) return console.error(err);\n    console.log(data.toString());\n&#125;);\n\nconsole.log(&quot;程序执行结束!&quot;);\n\n","categories":["前端"],"tags":["技巧手册","Node.js"]},{"title":"JavaScript-简单核心语法","url":"/post/JavaScript.html","content":"JavaScript 简单核心语法一、变量var &#x2F; let &#x2F; const \n\n1、赋值变量var myAge &#x3D; 18\n\n2、字符串变量var myName &#x3D; “帅哥”\n\n3、真假值变量var myBool &#x3D; true 丨注意只有true（真）和false（假）\n\n4、清空变量var myNull &#x3D; null 丨用于清空变量内容，变成空值\n\n5、默认值var myUn 丨这是有值的，没有赋予就是默认\n\n运算符+ &#x2F; - &#x2F; * &#x2F; % &#x2F; &lt; &#x2F; &gt; &#x2F; &#x3D; \n\n6、算数变量var sum &#x3D; 1 - 2 * 3 % 4   丨一起运算时，遵从“先乘除后加减”\n\n或\nvar sum &#x3D; &quot;你好&quot; + “javaScript” 丨这样子是 语句的拼接\n\n7、对比变量var isT &#x3D; 28 &gt;&#x3D; 4  丨28大于4或者等于4，isT这个变量就变为true（真值）\n\n或\nconsole.log(2 &#x3D;&#x3D;&#x3D; 2) 丨这个在语句中去对比，要3个等号，2&#x3D;2，即为true（真）值\n\n数组var myAge &#x3D; [1,2,3,4,5]\n\n\n索引console.log(myAge[1])   丨 1 代表第一位数，输出第一个变量\n\n\n\n二、语句if判断语句if (true) &#123;\n   console.log(&#39;我会执行第一&#39;)\n&#125;  \n\n\n小括号是条件 真就执行 假就反之 跳过\n大括号是执行的内容，执行事件等\n\nif (2 &gt; 3) &#123;\n   console.log(“我会输出1)\n&#125; else &#123;\n   console.log(&quot;我会输出2&quot;)\n&#125;\n\n\n小括号的条件 2不大于3 遵从 真就执行 假就反之 的原则，他会执行else的事件\n\n多重嵌套ifvar a &#x3D; 5\n\nif（a &lt;&#x3D; 1) &#123;\n console.log(&quot;我出1&quot;)\n&#125; else if（a &#x3D; 2）&#123;\n console.log(&quot;我出2&quot;)\n&#125; esle if（a &#x3D; 3) &#123;\n console.log(“我出3)\n&#125; else if (a &gt;&#x3D;4) &#123;\n console.log(&quot;我出4&quot;)\n&#125;\n\n从第一条开始判断直到符合条件的一条才会停下，a等于5 ，只有最后一条符合了条件，所以它会出4\nfor循环语句for (var a &#x3D; 1; a &lt; 10; a++) &#123;\n   console.log(我会执行10次)\n   sun b &#x3D; 1 + 1\n&#125;\nconsole.log(b)\n\n\nvar a &#x3D; 1   丨是声明循环次数的变量\na &lt; 10       丨是循环的条件\na++           丨是循环的每次增量   a++是a+1的简写\n{          }     丨是循环的事件或者变量\n\n三、函数function getSum () &#123;\n   var sum &#x3D; 0\n   for (var a &#x3D; 0; a &lt; 10; a++) &#123;\n      sum +&#x3D;1\n   &#125;\n   return sum\n   console.log(&quot;已经加了10次了&quot;)\n&#125;\n\nfunction    丨固定的声明函数\ngetSum     丨自己定义名字的函数名称\nreturn       丨结束返回值，结束并将函数返回到外部\n函数写好后需要自己调用\nvar qwe &#x3D; getSum()\n\n小括号的使用function getSum (start，end) &#123;\n   var sum &#x3D; 0\n   for (var a &#x3D; start; a &lt; end; a++) &#123;\n      sum +&#x3D;1\n   &#125;\n   return sum\n   console.log(&quot;已经加了10次了&quot;)\n&#125;\nvar qwe &#x3D; getSum(100,110)\n\n可以决定给值的区间\n常用的核心语法","categories":["前端"],"tags":["网页","JavaScript","使用教程"]},{"title":"CSS简单快速实用手册","url":"/post/CSS-ShouCe.html","content":"CSS简单快速实用手册外部样式表&lt;link href&#x3D;&quot;css文件名&quot; rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot;&gt;\n\n链接到css外部文件\n一、样式标签\n\n\nwidth\n宽度\n\n\n\nheight\n高度\n\n\nfort-height\n指定元素的高度\n\n\nbakground\n背景 （图片）\n\n\nmargin\n四个（上下左右）方向的外边距属性\n\n\npadding\n元素所有四条边的内边距区域\n\n\nfort-size\n字体大小\n\n\nfloat\n浮动字体方向\n\n\ndisplay\n规定元素应该生成的框的类型或者不显示\n\n\nborder\n用于设置各种单独的边界属性的简写属性\n\n\ncursor\n鼠标指针悬停在元素上时显示相应样式\n\n\nbox-shadow\n元素的框架上添加阴影效果\n\n\nposition\n指定一个元素在文档中的定位方式\n\n\nz-index\n较大的元素会覆盖较小的元素在上层进行显示（控制数量）\n\n\noverflow\n设置了元素溢出框时所需的行为\n\n\ntransition: all .3s\n一个元素在不同状态之间切换的时候定义不同的过渡效果和时间\n\n\ninput\n表单\n\n\nlist-style：none\n去掉无序列表的点\n\n\nopacity\n元素透明度\n\n\ncontain\n允许开发者声明当前元素和它的内容尽可能的独立于 DOM 树的其他\n\n\nbackground-attachment：fixed；\n设置背景图片固定，拉动滚动条，图片不动\n\n\nline-height\n调整行高\n\n\n二、选择器的使用1、通用选择器作用：选中页面中所有元素\n语法：* &#123;&#125;\n\n2、id选择器作用：选中对应id属性值的元素\n语法：#id属性值 &#123;&#125;\n\n3、类选择器 作用：选中对应class属性值的元素\n语法：.class属性值 &#123;&#125;\n\n4、元素选择器作用：选中对应元素&#x2F;标签里面的内容\n语法：标签名 &#123;&#125;\n\n5、分组选择器\n作用：是将不同的选择器组合在一起的方法，它选择所有能被列表中的任意一个选择器选中的节点\n语法:A,B &#123;&#125;\n\n\n\n标点符\n\n\n“空格”\n后代组合器\n组合器选择前一个元素的后代节点\n\n\n\n&gt;\n直接子代组合器\n组合器选择前一个元素的直接子代的节点\n\n\n~\n一般兄弟选组合器\n后一个节点在前一个节点后面的任意位置，并且共享同一个父节点\n\n\n+\n紧邻兄弟组合器\n后一个元素紧跟在前一个之后，并且共享同一个父节点\n\n\n||\n列组合器\n表示列关系\n\n\n6、伪类选择器\n伪类用于定义元素的特殊状态\n语法：A；状态标签 &#123;&#125;\n\n7、伪元素选择器\nCSS 伪元素用于设置元素指定部分的样式\n语法：A：：状态标签 &#123;&#125;\n\n8、属性选择器\n为带有特定属性的 HTML 元素设置样式\n语法：a[属性元素] &#123;&#125;\n\n注意：选择所有带有 target 属性的  元素\n","categories":["前端"],"tags":["网页","css","技巧手册"]},{"title":"HTML快速上手实用手册","url":"/post/html-ShouCe.html","content":"语法一、大体&lt;!DOCTYPE html&gt;               #命名\n&lt;html&gt;                        #heml文件的例\n&lt;head&gt;                      #定义头部\n&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;        #声明编码\n&lt;title&gt;首页标题&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;                        #正文内容\n \n&lt;h1&gt;我的第一个标题&lt;&#x2F;h1&gt;\n&lt;p&gt;我的第一个段落。&lt;&#x2F;p&gt;\n&lt;a href&#x3D;&quot;网页链接&quot;&gt;文本输出&lt;&#x2F;a&gt;\n&lt;font size&#x3D;&quot;5&quot;&gt;5号字体（文本输出）&lt;&#x2F;font&gt;\n&lt;p&gt;段落 &lt;br&gt;换行&lt;&#x2F;br&gt; &lt;&#x2F;p&gt;\n换行的使用：\n&lt;b&gt;粗体&lt;&#x2F;b&gt;\n&lt;br&gt;\n&lt;i&gt;斜体&lt;&#x2F;i&gt;\n \n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n注释&lt;!--  注释  --&gt;\n\n二、元素文本格式化标签&lt;b&gt;粗体&lt;&#x2F;b&gt;\n&lt;i&gt;斜体&lt;&#x2F;i&gt;\n&lt;q&gt;双引号&lt;&#x2F;q&gt;\n&lt;sub&gt;上标字&lt;&#x2F;sub&gt;\n&lt;sup&gt;下标字&lt;&#x2F;sup&gt;\n&lt;strong&gt;粗体 加重语气&lt;&#x2F;strong&gt;\n&lt;em&gt;斜体 着重文字&lt;&#x2F;em&gt;\n&lt;din&gt;斜体 定义项目&lt;&#x2F;din&gt;\n\n文档标签&lt;head&gt;定义文档的信息&lt;&#x2F;head&gt;\n&lt;title&gt;定义了文档的标题&lt;&#x2F;ttile&gt;\n&lt;base&gt;定义了链接标签的默认连接地址&lt;&#x2F;base&gt;\n&lt;meta&gt;定义了文档中的元数据&lt;meta&gt;\n&lt;scipl&gt;定义了客户端的脚本文件&lt;&#x2F;scipl&gt;\n&lt;style&gt;定义了文档的样式文件&lt;&#x2F;style&gt;\n\n\n三、图像1.图片&lt;img src&#x3D;&quot;planets-2120004 (3).jpg&quot; width&#x3D;&quot;5600&quot; height&#x3D;&quot;2822&quot; alt&#x3D;&quot;替代文本&quot;&#x2F;&gt;\n\nsrc&#x3D;名字（路径） 源属性 width&#x3D;宽度    height&#x3D;高度     alt&#x3D;在图像显示不出来的时候以文本信息显示出来\n2.内容对齐align 属性规定 div 元素中的内容的水平对齐方式。\n\nalign的使用:\n&lt;div align&#x3D;&quot;value&quot;&gt;\n\nleft &#x3D; #左对齐\nright&#x3D; #右对齐\ncenter&#x3D;#居中对齐\njustfy&#x3D;#对行进行伸展，这样每行都可以有相等的长度（就像在报纸和杂志中）\n\n3.图片上放链接&lt;a href&#x3D;&quot;网页链接&quot;&gt;\n    &lt;img src&#x3D;&quot;名字&quot; width&#x3D;&quot;宽度&quot; height&#x3D;&quot;高度&quot; alt&#x3D;&quot;替代文本&quot;&#x2F;&gt;\n&lt;&#x2F;a&gt;\n\n四、表格与列表简单使用\n\n    \n        Row 1, cell 1\n        Row 1, cell 2\n    \n\n\n表格标签&lt;table&gt;\t定义表格\n&lt;th&gt;\t定义表格的表头\n&lt;tr&gt;\t定义表格的行\n&lt;td&gt;\t定义表格单元\n&lt;caption&gt;\t定义表格标题\n&lt;colgroup&gt;\t定义表格列的组\n&lt;col&gt;\t定义用于表格列的属性\n&lt;thead&gt;\t定义表格的页眉\n&lt;tbody&gt;\t定义表格的主体\n&lt;tfoot&gt;\t定义表格的页脚\n\n\n列表标签&lt;ol&gt;\t定义有序列表\n&lt;ul&gt;\t定义无序列表\n&lt;li&gt;\t定义列表项\n&lt;dl&gt;\t定义列表\n&lt;dt&gt;\t自定义列表项目\n&lt;dd&gt;\t定义自定列表项的描述\n\n\n五、布局分组标签&lt;div&gt;   定义了文档的区域，块级 (block-level)\n&lt;span&gt;  用来组合文档中的行内元素， 内联元素(inline)\n\n六、字体颜色font是一对常规标签，将字体文本内容放入标签内，font标签内设置color颜色+对应颜色值即可设置font标签对象内字体颜色\n&lt;font color&#x3D;&quot;red&quot; size&#x3D;&quot;2&quot;&gt;HTML怎么设置字体颜色&lt;&#x2F;font&gt;\n\nHTML 标签简写及全称下表列出了 HTML 标签简写及全称：\n\n\n\n标签\n英文全称\n中文说明\n\n\n\na\nAnchor\n锚\n\n\nabbr\nAbbreviation\n缩写词\n\n\nacronym\nAcronym\n取首字母的缩写词\n\n\naddress\nAddress\n地址\n\n\nalt\nalter\n替用(一般是图片显示不出的提示)\n\n\nb\nBold\n粗体（文本）\n\n\nbdo\nDirection of Text Display\n文本显示方向\n\n\nbig\nBig\n变大（文本）\n\n\nblockquote\nBlock Quotation\n区块引用语\n\n\nbr\nBreak\n换行\n\n\ncell\ncell\n巢\n\n\ncellpadding\ncellpadding\n巢补白\n\n\ncellspacing\ncellspacing\n巢空间\n\n\ncenter\nCentered\n居中（文本）\n\n\ncite\nCitation\n引用\n\n\ncode\nCode\n源代码（文本）\n\n\ndd\nDefinition Description\n定义描述\n\n\ndel\nDeleted\n删除（的文本）\n\n\ndfn\nDefines a Definition Term\n定义定义条目\n\n\ndiv\nDivision\n分隔\n\n\ndl\nDefinition List\n定义列表\n\n\ndt\nDefinition Term\n定义术语\n\n\nem\nEmphasized\n加重（文本）\n\n\nfont\nFont\n字体\n\n\nh1~h6\nHeader 1 to Header 6\n标题1到标题6\n\n\nhr\nHorizontal Rule\n水平尺\n\n\nhref\nhypertext reference\n超文本引用\n\n\ni\nItalic\n斜体（文本）\n\n\niframe\nInline frame\n定义内联框架\n\n\nins\nInserted\n插入（的文本）\n\n\nkbd\nKeyboard\n键盘（文本）\n\n\nli\nList Item\n列表项目\n\n\nnl\nnavigation lists\n导航列表\n\n\nol\nOrdered List\n排序列表\n\n\noptgroup\nOption group\n定义选项组\n\n\np\nParagraph\n段落\n\n\npre\nPreformatted\n预定义格式（文本 ）\n\n\nq\nQuotation\n引用语\n\n\nrel\nReload\n加载\n\n\ns&#x2F; strike\nStrikethrough\n删除线\n\n\nsamp\nSample\n示例（文本\n\n\nsmall\nSmall\n变小（文本）\n\n\nspan\nSpan\n范围\n\n\nsrc\nSource\n源文件链接\n\n\nstrong\nStrong\n加重（文本）\n\n\nsub\nSubscripted\n下标（文本）\n\n\nsup\nSuperscripted\n上标（文本）\n\n\ntd\ntable data cell\n表格中的一个单元格\n\n\nth\ntable header cell\n表格中的表头\n\n\ntr\ntable row\n表格中的一行\n\n\ntt\nTeletype\n打印机（文本）\n\n\nu\nUnderlined\n下划线（文本）\n\n\nul\nUnordered List\n不排序列表\n\n\nvar\nVariable\n变量（文本）\n\n\n","categories":["前端"],"tags":["网页","技巧手册","html"]},{"title":"HTML使用教程","url":"/post/HTML.html","content":"HTML使用教程注意：对于中文网页需要使用声明编码\nHTML 速查列表 \n一、语法大体&lt;!DOCTYPE html&gt;               #命名\n&lt;html&gt;                        #heml文件的例\n&lt;head&gt;                      #定义头部\n&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;        #声明编码\n&lt;title&gt;首页标题&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;                        #正文内容\n \n&lt;h1&gt;我的第一个标题&lt;&#x2F;h1&gt;\n \n&lt;p&gt;我的第一个段落。&lt;&#x2F;p&gt;\n \n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n注释&lt;!--  注释  --&gt;\n\n二、元素1.常用语法&lt;h&gt;标题&lt;&#x2F;h&gt;\n&lt;p&gt;段落&lt;&#x2F;P&gt;\n&lt;body&gt;正文&lt;&#x2F;body&gt;\n&lt;a href&#x3D;&quot;网页链接&quot;&gt;文本输出&lt;&#x2F;a&gt;\n&lt;font size&#x3D;&quot;5&quot;&gt;5号字体（文本输出）&lt;&#x2F;font&gt;\n&lt;p&gt;段落 &lt;br&gt;换行&lt;&#x2F;br&gt; &lt;&#x2F;p&gt;\n换行的使用：\n&lt;b&gt;粗体&lt;&#x2F;b&gt;\n&lt;br&gt;\n&lt;i&gt;斜体&lt;&#x2F;i&gt;\n\n\n\n2.文本格式化标签&lt;b&gt;粗体&lt;&#x2F;b&gt;\n&lt;i&gt;斜体&lt;&#x2F;i&gt;\n&lt;q&gt;双引号&lt;&#x2F;q&gt;\n&lt;sub&gt;上标字&lt;&#x2F;sub&gt;\n&lt;sup&gt;下标字&lt;&#x2F;sup&gt;\n&lt;strong&gt;粗体 加重语气&lt;&#x2F;strong&gt;\n&lt;em&gt;斜体 着重文字&lt;&#x2F;em&gt;\n&lt;din&gt;斜体 定义项目&lt;&#x2F;din&gt;\n\n\n3.文档标签&lt;head&gt;定义文档的信息&lt;&#x2F;head&gt;\n&lt;title&gt;定义了文档的标题&lt;&#x2F;ttile&gt;\n&lt;base&gt;定义了链接标签的默认连接地址&lt;&#x2F;base&gt;\n&lt;meta&gt;定义了文档中的元数据&lt;meta&gt;\n&lt;scipl&gt;定义了客户端的脚本文件&lt;&#x2F;scipl&gt;\n&lt;style&gt;定义了文档的样式文件&lt;&#x2F;style&gt;\n\n\n三、图像1.图片&lt;img src&#x3D;&quot;planets-2120004 (3).jpg&quot; width&#x3D;&quot;5600&quot; height&#x3D;&quot;2822&quot; alt&#x3D;&quot;替代文本&quot;&#x2F;&gt;\n\nsrc&#x3D;名字 源属性 width&#x3D;宽度    height&#x3D;高度     alt&#x3D;在图像显示不出来的时候以文本信息显示出来\n\n2.内容对齐align 属性规定 div 元素中的内容的水平对齐方式。\n\nleft &#x3D; #左对齐\nright&#x3D; #右对齐\ncenter&#x3D;#居中对齐\njustfy&#x3D;#对行进行伸展，这样每行都可以有相等的长度（就像在报纸和杂志中）\n\nalign的使用:\n&lt;div align&#x3D;&quot;value&quot;&gt;\n\n\n\n\n3.图片上放链接&lt;a href&#x3D;&quot;网页链接&quot;&gt;\n    &lt;img src&#x3D;&quot;名字&quot; width&#x3D;&quot;宽度&quot; height&#x3D;&quot;高度&quot; alt&#x3D;&quot;替代文本&quot;&#x2F;&gt;\n&lt;&#x2F;a&gt;\n\n\n边框的图片链接border&#x3D;边界 输入0就不会出现边框 输入其他数字就会出现边框\n&lt;a href&#x3D;&quot;网页链接&quot;&gt;\n&lt;img border&#x3D;&quot;0&quot; src&#x3D;&quot;名字&quot; alt&#x3D;&quot;HTML 教程&quot; width&#x3D;&quot;32&quot; height&#x3D;&quot;32&quot;&gt;&lt;&#x2F;a&gt;\n\n4.图像映射coords(区域)coords 属性规定区域的 x 和 y 坐标。\ncoords 属性与 shape 属性配合使用，来规定区域的尺寸、形状和位置。 \ncoords指的应该是链接区域在图片中的坐标（像素为单位）\n\n&lt;map name&#x3D;&quot;planetmap&quot;&gt;\n  &lt;area shape&#x3D;&quot;rect&quot; coords&#x3D;&quot;0,0,82,126&quot; alt&#x3D;&quot;Sun&quot; href&#x3D;&quot;sun.htm&quot;&gt;\n  &lt;area shape&#x3D;&quot;circle&quot; coords&#x3D;&quot;90,58,3&quot; alt&#x3D;&quot;Mercury&quot; href&#x3D;&quot;mercur.htm&quot;&gt;\n&lt;&#x2F;map&gt;\n\n\t  定义图像地图\t定义图像地图中的可点击区域\nshape（形状）该段代码中的shape指的是点击区域的形状，rect  &#x3D;矩形矩形：(左上角顶点坐标为(x1,y1)，右下角顶点坐标为(x2,y2))  、\n&lt;area shape&#x3D;&quot;rect&quot; coords&#x3D;&quot;x1,y1,x2,y2&quot; href&#x3D;url&gt;\n\ncircle&#x3D;圆形圆形：(圆心坐标为(X1,y1)，半径为r)  \n&lt;area shape&#x3D;&quot;circle&quot; coords&#x3D;&quot;x1,y1,r&quot; href&#x3D;url&gt;\n\npoly &#x3D;多边形多边形：(各顶点坐标依次为(x1,y1)、(x2,y2)、(x3,y3) ……)\n&lt;area shape&#x3D;&quot;poly&quot; coords&#x3D;&quot;x1,y1,x2,y2 ......&quot; href&#x3D;url&gt;\n\n\n四、表格与边框table&#x3D; 表格\nborder&#x3D;边框\n1.无边框的表格&lt;table&gt;\n    &lt;tr&gt;\n        &lt;td&gt;Row 1, cell 1&lt;&#x2F;td&gt;\n        &lt;td&gt;Row 1, cell 2&lt;&#x2F;td&gt;\n    &lt;&#x2F;tr&gt;\n&lt;&#x2F;table&gt;\n\n2.有边框的表格&lt;table border&#x3D;&quot;1&quot;&gt;\n    &lt;tr&gt;\n        &lt;td&gt;Row 1, cell 1&lt;&#x2F;td&gt;\n        &lt;td&gt;Row 1, cell 2&lt;&#x2F;td&gt;\n    &lt;&#x2F;tr&gt;\n&lt;&#x2F;table&gt;\n\n3.表格标签&lt;table&gt;\t定义表格\n&lt;th&gt;\t定义表格的表头\n&lt;tr&gt;\t定义表格的行\n&lt;td&gt;\t定义表格单元\n&lt;caption&gt;\t定义表格标题\n&lt;colgroup&gt;\t定义表格列的组\n&lt;col&gt;\t定义用于表格列的属性\n&lt;thead&gt;\t定义表格的页眉\n&lt;tbody&gt;\t定义表格的主体\n&lt;tfoot&gt;\t定义表格的页脚\n\n\n五、列表、区块与布局列表1.无序列表使用  标签\n&lt;ul&gt;\n&lt;li&gt;列表一&lt;&#x2F;li&gt;\n&lt;li&gt;列表二&lt;&#x2F;li&gt;\n&lt;&#x2F;ul&gt;\n\n\n\n2.有序列表 有序列表始于  标签。每个列表项始于  标签\n&lt;ol&gt;\n&lt;li&gt;列表一&lt;&#x2F;li&gt;\n&lt;li&gt;列表二&lt;&#x2F;li&gt;\n&lt;&#x2F;ol&gt;\n\n3.自定义列表自定义列表以  标签开始。每个自定义列表项以  开始。每个自定义列表项的定义以  开始。\n&lt;h4&gt;一个自定义列表：&lt;&#x2F;h4&gt;\n&lt;dl&gt;\n  &lt;dt&gt;Coffee&lt;&#x2F;dt&gt;\n  &lt;dd&gt;- black hot drink&lt;&#x2F;dd&gt;\n  &lt;dt&gt;Milk&lt;&#x2F;dt&gt;\n  &lt;dd&gt;- white cold drink&lt;&#x2F;dd&gt;\n&lt;&#x2F;dl&gt;\n\n4.列表标签&lt;ol&gt;\t定义有序列表\n&lt;ul&gt;\t定义无序列表\n&lt;li&gt;\t定义列表项\n&lt;dl&gt;\t定义列表\n&lt;dt&gt;\t自定义列表项目\n&lt;dd&gt;\t定义自定列表项的描述\n\n\n区块1.区块元素与内联元素大多数 HTML 元素被定义为块级元素或内联元素。\n块级元素在浏览器显示时，通常会以新行来开始（和结束）。实例: \n&lt;h1&gt;, &lt;p&gt;, &lt;ul&gt;, &lt;table&gt;\n\n内联元素在显示时通常不会以新行开始。实例: \n&lt;b&gt;, &lt;td&gt;, &lt;a&gt;, &lt;img&gt;\n\n\n\n\n2. div(块级)、span(内联)HTML  元素是块级元素，它可用于组合其他 HTML 元素的容器。\ndiv 元素没有特定的含义。除此之外，由于它属于块级元素，浏览器会在其前后显示折行。如果与  CSS 一同使用， 元素可用于对大的内容块设置样式属性。div 元素的另一个常见的用途是文档布局。它取代了使用表格定义布局的老式方法。\ndiv 可定义文档中的分区或节（division&#x2F;section）。div 标签可以把文档分割为独立的、不同的部分。它可以用作严格的组织工具，并且不使用任何格式与其关联。如果用 id 或 class 来标记 div，那么该标签的作用会变得更加有效。\n &lt;div class&#x3D;&quot;news&quot;&gt;\n  &lt;h2&gt;News headline 1&lt;&#x2F;h2&gt;\n  &lt;p&gt;some text. some text. some text...&lt;&#x2F;p&gt;\n  ...\n&lt;&#x2F;div&gt;\n\n使用 table 元素进行文档布局不是表格的正确用法table 元素的作用是显示表格化的数据。\n&lt;p&gt;&lt;span&gt;some text.&lt;&#x2F;span&gt;some other text.&lt;&#x2F;p&gt;\n\n（标签都支持的属性）一、[全局属性](HTML 全局属性 (w3school.com.cn))\n二、[事件属性](HTML 事件参考手册 (w3school.com.cn))\n3.分组标签&lt;div&gt;\t定义了文档的区域，块级 (block-level)\n&lt;span&gt;\t用来组合文档中的行内元素， 内联元素(inline)\n\n布局1.网站布局说明\n大多数网站会把内容安排到多个列中（就像杂志或报纸那样）。\n大多数网站可以使用 div或者 table元素来创建多列。\nCSS 用于对元素进行定位，或者为页面创建背景以及色彩丰富的外观。\n\n2. div布局前言：div 元素是用于分组 HTML 元素的块级元素\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt; \n&lt;meta charset&#x3D;&quot;utf-8&quot;&gt; \n&lt;title&gt;菜鸟教程(runoob.com)&lt;&#x2F;title&gt; \n&lt;&#x2F;head&gt;\n&lt;body&gt;\n \n&lt;div id&#x3D;&quot;container&quot; style&#x3D;&quot;width:500px&quot;&gt;\n \n&lt;div id&#x3D;&quot;header&quot; style&#x3D;&quot;background-color:#FFA500;&quot;&gt;\n&lt;h1 style&#x3D;&quot;margin-bottom:0;&quot;&gt;主要的网页标题&lt;&#x2F;h1&gt;&lt;&#x2F;div&gt;\n \n&lt;div id&#x3D;&quot;menu&quot; style&#x3D;&quot;background-color:#FFD700;height:200px;width:100px;float:left;&quot;&gt;\n&lt;b&gt;菜单&lt;&#x2F;b&gt;&lt;br&gt;\nHTML&lt;br&gt;\nCSS&lt;br&gt;\nJavaScript&lt;&#x2F;div&gt;\n \n&lt;div id&#x3D;&quot;content&quot; style&#x3D;&quot;background-color:#EEEEEE;height:200px;width:400px;float:left;&quot;&gt;\n内容在这里&lt;&#x2F;div&gt;\n \n&lt;div id&#x3D;&quot;footer&quot; style&#x3D;&quot;background-color:#FFA500;clear:both;text-align:center;&quot;&gt;\n版权 © runoob.com&lt;&#x2F;div&gt;\n \n&lt;&#x2F;div&gt;\n \n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n3.表格布局前言：使用table标签是创建布局的一种简单的方式。\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt; \n&lt;meta charset&#x3D;&quot;utf-8&quot;&gt; \n&lt;title&gt;菜鸟教程(runoob.com)&lt;&#x2F;title&gt; \n&lt;&#x2F;head&gt;\n&lt;body&gt;\n \n&lt;table width&#x3D;&quot;500&quot; border&#x3D;&quot;0&quot;&gt;\n&lt;tr&gt;\n&lt;td colspan&#x3D;&quot;2&quot; style&#x3D;&quot;background-color:#FFA500;&quot;&gt;\n&lt;h1&gt;主要的网页标题&lt;&#x2F;h1&gt;\n&lt;&#x2F;td&gt;\n&lt;&#x2F;tr&gt;\n \n&lt;tr&gt;\n&lt;td style&#x3D;&quot;background-color:#FFD700;width:100px;&quot;&gt;\n&lt;b&gt;菜单&lt;&#x2F;b&gt;&lt;br&gt;\nHTML&lt;br&gt;\nCSS&lt;br&gt;\nJavaScript\n&lt;&#x2F;td&gt;\n&lt;td style&#x3D;&quot;background-color:#eeeeee;height:200px;width:400px;&quot;&gt;\n内容在这里&lt;&#x2F;td&gt;\n&lt;&#x2F;tr&gt;\n \n&lt;tr&gt;\n&lt;td colspan&#x3D;&quot;2&quot; style&#x3D;&quot;background-color:#FFA500;text-align:center;&quot;&gt;\n版权 © runoob.com&lt;&#x2F;td&gt;\n&lt;&#x2F;tr&gt;\n&lt;&#x2F;table&gt;\n \n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n提示：\nTip: 使用 CSS 最大的好处是，如果把 CSS 代码存放到外部样式表中，那么站点会更易于维护。通过编辑单一的文件，就可以改变所有页面的布局。如需学习更多有关 CSS 的知识，请访问我们的CSS 教程。\nTip: 由于创建高级的布局非常耗时，使用模板是一个快速的选项。通过搜索引擎可以找到很多免费的网站模板（您可以使用这些预先构建好的网站布局，并优化它们）。\n\n六、表单（输入）1. HTML 表单\nHTML 表单用于收集用户的输入信息。\nHTML 表单表示文档中的一个区域，此区域包含交互控件，将用户收集到的信息发送到 Web 服务器。\n\n2.输入元素多数情况下被用到的表单标签是输入标签 input。输入类型是由 type 属性定义。\n\n普通输入：文本域通过  标签来设定，当用户要在表单中键入字母、数字等内容时，就会用到文本域\n&lt;form action&#x3D;&quot;&quot;&gt;\n\t输入一：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;cheng&quot;&lt;br&gt;\n&lt;&#x2F;form&gt;\n\n\n注意：表单本身是不可见的。并且注意一个文本字段的默认宽度是20个字符\n\n\n\n密码输入：密码字段通过标签  来定义\n&lt;form action&#x3D;&quot;&quot;&gt;\n     Password: &lt;input type&#x3D;&quot;password&quot; name&#x3D;&quot;password&quot;&gt;\n&lt;&#x2F;form&gt;\n\n\n密码字段中的字符是隐藏的(显示为星号或圆圈)。\n\n\n单选按钮：单选按钮**** 标签定义了表单的单选框选项:\n&lt;form action&#x3D;&quot;&quot;&gt;\n&lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;sex&quot; value&#x3D;&quot;male&quot;&gt;男&lt;br&gt;\n&lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;sex&quot; value&#x3D;&quot;female&quot;&gt;女\n&lt;&#x2F;form&gt;\n\n\n复选框：复选框**** 定义了复选框。复选框可以选取一个或多个选项：\n&lt;form&gt;\n&lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;vehicle&quot; value&#x3D;&quot;Bike&quot;&gt;我喜欢自行车&lt;br&gt;\n&lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;vehicle&quot; value&#x3D;&quot;Car&quot;&gt;我喜欢小汽车\n&lt;&#x2F;form&gt;\n\n\n提交按钮：提交按钮 定义了提交按钮。当用户单击确认按钮时，表单的内容会被传送到服务器。表单的动作属性 action 定义了服务端的文件名。action 属性会对接收到的用户输入数据进行相关的处理\n&lt;form name&#x3D;&quot;input&quot; action&#x3D;&quot;html_form_action.php&quot; method&#x3D;&quot;get&quot;&gt;\nUsername: &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;user&quot;&gt;\n&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;Submit&quot;&gt;\n&lt;&#x2F;form&gt;\n\n\n重置按钮：重置按钮定义重置按钮点击之后会将重置按钮所在的表单中填写的内容重新设置为默认值\n&lt;form action&#x3D;&quot;demo-form.php&quot;&gt;\n  Email: &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;email&quot;&gt;&lt;br&gt;\n  Pin: &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;pin&quot; maxlength&#x3D;&quot;4&quot;&gt;&lt;br&gt;\n  &lt;input type&#x3D;&quot;reset&quot; value&#x3D;&quot;重置&quot;&gt;\n  &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&gt;\n&lt;&#x2F;form&gt;\n\n\n3.表单标签&lt;form&gt;\t定义供用户输入的表单\n&lt;input&gt;\t定义输入域\n&lt;textarea&gt;\t定义文本域 (一个多行的输入控件)\n&lt;label&gt;\t定义了 &lt;input&gt; 元素的标签，一般为输入标题\n&lt;fieldset&gt;\t定义了一组相关的表单元素，并使用外框包含起来\n&lt;legend&gt;\t定义了 &lt;fieldset&gt; 元素的标题\n&lt;select&gt;\t定义了下拉选项列表\n&lt;optgroup&gt;\t定义选项组\n&lt;option&gt;\t定义下拉列表中的选项\n&lt;button&gt;\t定义一个点击按钮\n&lt;datalist&gt;New\t指定一个预先定义的输入控件选项列表\n&lt;keygen&gt;New\t定义了表单的密钥对生成器字段\n&lt;output&gt;New\t定义一个计算结果\n\n\n\n\n七、框架通过使用框架，你可以在同一个浏览器窗口中显示不止一个页面。\n&lt;iframe&gt; 定义一个内联的iframe\n\n\niframe语法&lt;iframe src&#x3D;&quot;URL&quot;&gt;&lt;&#x2F;iframe&gt;\n\n该URL指向不同的网页。\n\niframe - 设置高度与宽度height 和 width 属性用来定义iframe标签的高度与宽度。属性默认以像素为单位, 但是你可以指定其按比例显示 (如：”80%”)。\n&lt;iframe loading&#x3D;&quot;lazy&quot; src&#x3D;&quot;demo_iframe.htm&quot; width&#x3D;&quot;200&quot; height&#x3D;&quot;200&quot;&gt;&lt;&#x2F;iframe&gt;\n\n\niframe - 移除边框frameborder 属性用于定义iframe表示是否显示边框。设置属性值为 “0” 移除iframe的边框:\n&lt;iframe src&#x3D;&quot;demo_iframe.htm&quot; frameborder&#x3D;&quot;0&quot;&gt;&lt;&#x2F;iframe&gt;\n\n\n使用 iframe 来显示目标链接页面iframe 可以显示一个目标链接的页面目标链接的属性必须使用 iframe 的属性：\n&lt;iframe src&#x3D;&quot;demo_iframe.htm&quot; name&#x3D;&quot;iframe_a&quot;&gt;&lt;&#x2F;iframe&gt;\n&lt;p&gt;&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;www.runoob.com&quot; target&#x3D;&quot;iframe_a&quot; rel&#x3D;&quot;noopener&quot;&gt;RUNOOB.COM&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;\n\n\n八、颜色\nHTML 颜色由红色、绿色、蓝色混合而成\nHTML 颜色由一个十六进制符号来定义，这个符号由红色、绿色和蓝色的值组成（RGB）。\n每种颜色的最小值是0（十六进制：#00）。最大值是255（十六进制：#FF）。\n\n\nRGBARGBA 的意思是（Red-Green-Blue-Alpha）它是在 RGB 上扩展包括了 “alpha” 通道，运行对颜色值设置透明度。\ndiv &#123;\n\nbackground:rgba(255,0,0,0.5);\n\n&#125;\n\n\n相对于使用 rgb(255,255,0)，使用 rgba(255,255,0,0.5) 可以实现设置颜色透明度的功能，这里的 0.5 表示透明度，范围 0~1，0 表示全透明。\n\n通常我们为了省略一个 0:\n\n\ndiv &#123;\n    background:rgba(255,0,0,.5);\n&#125;\n\n\n\n\n实例：\n&lt;p style&#x3D;&quot;background-color:rgb(255,255,0)&quot;&gt;\n通过 rbg 值设置背景颜色\n&lt;&#x2F;p&gt;\n&lt;p style&#x3D;&quot;background-color:rgba(255,255,0,0.25)&quot;&gt;\n通过 rbg 值设置背景颜色\n&lt;&#x2F;p&gt;\n&lt;p style&#x3D;&quot;background-color:rgba(255,255,0,0.5)&quot;&gt;\n通过 rbg 值设置背景颜色\n&lt;&#x2F;p&gt;\n&lt;p style&#x3D;&quot;background-color:rgba(255,255,0,0.75)&quot;&gt;\n通过 rbg 值设置背景颜色\n&lt;&#x2F;p&gt;\n\n1.十六进制&lt;p style&#x3D;&quot;background-color:#FFFF00&quot;&gt;\n通过十六进制设置背景颜色\n\n\n2.RGB&lt;p style&#x3D;&quot;background-color:rgb(255,255,0)&quot;&gt;\n通过 rgb 值设置背景颜色\n\n\n3.颜色名&lt;p style&#x3D;&quot;background-color:yellow&quot;&gt;\n通过颜色名设置背景颜色\n\n[颜色库](HTML 颜色值 | 菜鸟教程 (runoob.com))\n\n4.字体颜色font是一对常规标签，将字体文本内容放入标签内，font标签内设置color颜色+对应颜色值即可设置font标签对象内字体颜色。\n&lt;font color&#x3D;&quot;red&quot; size&#x3D;&quot;2&quot;&gt;HTML怎么设置字体颜色&lt;&#x2F;font&gt;\n\n\n\n","categories":["前端"],"tags":["网页","使用教程","html"]}]